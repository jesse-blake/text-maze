'use strict';

module.exports = {

    // Clean the text to be rendered in the maze
    cleanText: function(text) {
        return text
            .replace(/(^\s+|\s+$)/g, '')      // Trim whitespace
            .replace(/[^A-Za-z0-9 .?!']/g, '') // Remove blacklisted characters
            .replace(/\s+/g, ' ');            // Reduce contiguous whitespace to a single space
    },

    // Return the height (in rows of maze components) of a maze character
    getCharHeight: function() {
        return this._A.length;
    },

    // Return the length (in maze components) a character requires horizontally in the maze
    getLengthOfCharInMaze: function(ch) {
        switch (ch) {
            case ' ':
                return this._Space[0].length;
            case '.':
                return this._Period[0].length;
            case '?':
                return this._Question[0].length;
            case '!':
                return this._Exclamation[0].length;
            case "'":
                return this._Apostrophe[0].length;
            case '-':
                return this._Hyphen[0].length;
        }

        return this['_' + ch.toUpperCase()][0].length;
    },

    getRowOfChar: function(ch, idx) {
        switch (ch) {
            case ' ':
                return this._Space[idx];
            case '.':
                return this._Period[idx];
            case '?':
                return this._Question[idx];
            case '!':
                return this._Exclamation[idx];
            case "'":
                return this._Apostrophe[idx];
            case '-':
                return this._Hyphen[idx];
        }

        return this['_' + ch.toUpperCase()][idx];
    },

    _A: [
      [1,1,1],
      [1,0,1],
      [1,1,1],
      [1,0,1],
      [1,0,1]
    ],
    _B: [
      [1,1,1,0],
      [1,0,1,0],
      [1,1,1,1],
      [1,0,0,1],
      [1,1,1,1]
    ],
    _C: [
      [1,1,1],
      [1,0,0],
      [1,0,0],
      [1,0,0],
      [1,1,1]
    ],
    _D: [
      [1,1,1,0],
      [1,0,1,1],
      [1,0,0,1],
      [1,0,1,1],
      [1,1,1,0]
    ],
    _E: [
      [1,1,1],
      [1,0,0],
      [1,1,1],
      [1,0,0],
      [1,1,1]
    ],
    _F: [
      [1,1,1],
      [1,0,0],
      [1,1,1],
      [1,0,0],
      [1,0,0]
    ],
    _G: [
      [1,1,1],
      [1,0,0],
      [1,0,1],
      [1,0,1],
      [1,1,1]
    ],
    _H: [
      [1,0,1],
      [1,0,1],
      [1,1,1],
      [1,0,1],
      [1,0,1]
    ],
    _I: [
      [1,1,1],
      [0,1,0],
      [0,1,0],
      [0,1,0],
      [1,1,1]
    ],
    _J: [
      [0,0,1],
      [0,0,1],
      [0,0,1],
      [1,0,1],
      [1,1,1]
    ],
    _K: [
      [1,0,0,1],
      [1,0,1,1],
      [1,1,1,0],
      [1,0,1,1],
      [1,0,0,1]
    ],
    _L: [
      [1,0,0],
      [1,0,0],
      [1,0,0],
      [1,0,0],
      [1,1,1]
    ],
    _M: [
      [1,1,1,1,1],
      [1,0,1,0,1],
      [1,0,1,0,1],
      [1,0,1,0,1],
      [1,0,1,0,1]
    ],
    _N: [
      [1,1,1,0,1],
      [1,0,1,0,1],
      [1,0,1,0,1],
      [1,0,1,0,1],
      [1,0,1,1,1]
    ],
    _O: [
      [1,1,1],
      [1,0,1],
      [1,0,1],
      [1,0,1],
      [1,1,1]
    ],
    _P: [
      [1,1,1],
      [1,0,1],
      [1,1,1],
      [1,0,0],
      [1,0,0]
    ],
    _Q: [
      [1,1,1,0],
      [1,0,1,0],
      [1,0,1,0],
      [1,0,1,0],
      [1,1,1,1]
    ],
    _R: [
      [1,1,1,0],
      [1,0,1,0],
      [1,1,1,0],
      [1,0,1,1],
      [1,0,0,1]
    ],
    _S: [
      [1,1,1],
      [1,0,0],
      [1,1,1],
      [0,0,1],
      [1,1,1]
    ],
    _T: [
      [1,1,1],
      [0,1,0],
      [0,1,0],
      [0,1,0],
      [0,1,0]
    ],
    _U: [
      [1,0,1],
      [1,0,1],
      [1,0,1],
      [1,0,1],
      [1,1,1]
    ],
    _V: [
      [1,0,1],
      [1,0,1],
      [1,0,1],
      [1,1,1],
      [0,1,0]
    ],
    _W: [
      [1,0,1,0,1],
      [1,0,1,0,1],
      [1,0,1,0,1],
      [1,0,1,0,1],
      [1,1,1,1,1]
    ],
    _X: [
      [1,0,1],
      [1,1,1],
      [0,1,0],
      [1,1,1],
      [1,0,1]
    ],
    _Y: [
      [1,0,1],
      [1,0,1],
      [1,1,1],
      [0,0,1],
      [1,1,1]
    ],
    _Z: [
      [1,1,1,1],
      [0,0,1,0],
      [0,1,1,0],
      [0,1,0,0],
      [1,1,1,1]
    ],
    _0: [
      [1,1,1],
      [1,0,1],
      [1,0,1],
      [1,0,1],
      [1,1,1]
    ],
    _1: [
      [0,1,0],
      [1,1,0],
      [0,1,0],
      [0,1,0],
      [1,1,1]
    ],
    _2: [
      [1,1,1],
      [0,0,1],
      [1,1,1],
      [1,0,0],
      [1,1,1]
    ],
    _3: [
      [1,1,1],
      [0,0,1],
      [1,1,1],
      [0,0,1],
      [1,1,1]
    ],
    _4: [
      [1,0,1],
      [1,0,1],
      [1,1,1],
      [0,0,1],
      [0,0,1]
    ],
    _5: [
      [1,1,1],
      [1,0,0],
      [1,1,0],
      [0,0,1],
      [1,1,0]
    ],
    _6: [
      [1,1,1],
      [1,0,0],
      [1,1,1],
      [1,0,1],
      [1,1,1]
    ],
    _7: [
      [1,1,1],
      [0,0,1],
      [0,0,1],
      [0,0,1],
      [0,0,1]
    ],
    _8: [
      [1,1,1],
      [1,0,1],
      [1,1,1],
      [1,0,1],
      [1,1,1]
    ],
    _9: [
      [1,1,1],
      [1,0,1],
      [1,1,1],
      [0,0,1],
      [0,0,1]
    ],
    _Space: [
      [0],
      [0],
      [0],
      [0],
      [0]
    ],
    _Period: [
      [0],
      [0],
      [0],
      [0],
      [1]
    ],
    _Question: [
      [1,1,1],
      [0,0,1],
      [0,1,1],
      [0,0,0],
      [0,1,0]
    ],
    _Exclamation: [
      [1],
      [1],
      [1],
      [0],
      [1]
    ],
    _Apostrophe: [
      [1],
      [1],
      [0],
      [0],
      [0]
    ],
    _Hyphen: [
      [0,0],
      [0,0],
      [1,1],
      [0,0],
      [0,0]
    ]
};
