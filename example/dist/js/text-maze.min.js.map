{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/index.js","../lib/build/Character.js","../lib/build/CharacterMaps.js","../lib/build/break-text-into-lines.js","../lib/build/connect-characters/CharacterSide.js","../lib/build/connect-characters/connect-spaces.js","../lib/build/connect-characters/find-adjacent-character.js","../lib/build/connect-characters/horizontally.js","../lib/build/connect-characters/index.js","../lib/build/connect-characters/vertically.js","../lib/build/embed-text.js","../lib/build/fill-out.js","../lib/build/flatten.js","../lib/build/index.js","../lib/build/pad-lines.js","../lib/build/set-endpoints.js","../lib/controls/index.js","../lib/controls/view.js","../lib/index.js","../lib/load/auto-size.js","../lib/load/index.js","../lib/paint/index.js","../lib/paint/web-colors.js","../lib/polyfill.js","../lib/solve.js","../lib/utils.js","../lib/view.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","init","currentlyShowingText","useSpeedMeter","colors","randomize","fluctuate","CharMaps","initBlank","this","ch","topLeftX","topLeftY","connected","spaceCharConnectionArray","arguments","flattenCharacter","x","y","flattened","visited","solution","color","unvisited","path","connection","getBitAtLocationInChar","cleanText","text","replace","getCharHeight","_A","map","getLengthOfCharInMaze","_getChar","getRowOfChar","idx","slice","getConnectionOptsForSideOfChar","side","bitmap","charMap","push","_Space","_Period","_Question","_Exclamation","_Apostrophe","_TwoSpacePad","_Hyphen","toUpperCase","_B","_C","_D","_E","_F","_G","_H","_I","_J","_K","_L","_M","_N","_O","_P","_Q","_R","_S","_T","_U","_V","_W","_X","_Y","_Z","_0","_1","_2","_3","_4","_5","_6","_7","_8","_9","getWordLength","word","wordChars","split","hyphenateWord","lines","state","maxLineLen","nextLen","wordLen","chars","front","back","currLineIdx","lineLen","maxMazeWidth","locationSize","words","ofChar","whichSide","getNameOfOppositeSide","top","right","bottom","left","utils","maze","charlist","j","loIdx","hiIdx","connect","connections","stop","charHgt","randomInRange","unshift","Math","random","getXCoordsOfChar","xCoords","charLen","isValidCharacterLoc","getXCoordForRandomAdjacentChar","character","shuffleArrayInPlace","findSpecialCase","leftChar","rightChar","cases","BT","B7","B?","B'","C-","DI","DT","DZ","D7","D.","D?","FJ","F1","F.","I-","K-","LT","LV","L4","L7","L9","L?","L-","L'","L*","PJ","P.","QT","QV","Q4","Q7","Q9","Q?","Q-","Q'","Q*","RT","R4","R7","R9","R?","R-","R'","R*","TJ","T1","T.","T-","V.","X-","Z-","1T","1V","14","17","19","1?","1-","1'","1*","51","5.","5-",".T",".V",".4",".7",".9",".?",".-",".'",".*","?J","?.","-I","-J","-T","-X","-Z","-1","-7","-.","-?","-'","'J","'.","'-","*T","*7","*?","*'","result","specialCase","ch1Side","ch2","specialCaseConnection","ch1","ch1Opts","ch2Opts","findAdjacentChar","connectHorizontally","connectVertically","CharacterSide","connectSpaces","addSidesOfCharToSidelist","sidelist","sides","Object","create","adjChar","startCharIdx","pop","ch1Len","ch2Len","ch1Start","abs","ch2Start","overlap","ch1End","ch2End","ch1Idx","ch2Idx","Character","k","blank","lenAbove","lenBelow","numCharBlanksToAdd","charAt","checkAround","adjacent","addPath","locations","endpoints","start","end","verifyConnections","getMaxMazeWidth","mazeMargin","windowWidth","window","innerWidth","document","documentElement","clientWidth","body","max","getElementById","value","removeAttribute","autoSize","breakTextIntoLines","embedText","connectCharacters","padLines","setEndpoints","flatten","fillOut","opts","adjustSpeed","canvas","ctrls","speed","prevSpeed","continueRunning","solve","running","run","animationDelays","view","updateSpeedCtrls","colorSpeedMeter","rebuild","build","load","paint","all","stopDefault","evt","preventDefault","returnValue","addListener","type","elem","func","addEventListener","attachEvent","mainView","id","c","maze-rebuild-ctrl","action","maze-show-text-ctrl","updateShowingTextCtrl","showingSolution","toggleShowingSolution","maze-show-text-label","maze-hide-text-label","maze-show-solution-ctrl","updateShowingSolutionCtrl","toggleShowingText","show","maze-show-solution-label","maze-hide-solution-label","maze-solve-start-ctrl","maze-solve-pause-ctrl","disableCtrl","maze-solve-reset-ctrl","maze-decrease-speed-ctrl","maze-increase-speed-ctrl","injectSpeedMeter","maze-decrease-size-ctrl","size","minLocationSize","maxLocationSize","setLocationSize","updateSizeCtrls","maze-increase-size-ctrl","maze-auto-size-ctrl","autoSetLocationSize","maze-text-input-ctrl","input","oninput","originalText","enableCtrl","clearTimeout","textChangeRebuildTimeout","setTimeout","onpropertychange","keyCode","maze-reset-ctrl","clearTextInput","hasOwnProperty","bind","screenChangeRebuildTimeout","setMazeTopMargin","style","display","ctrlId","setAttribute","click","newNode","childNode","createElement","className","innerHTML","parentNode","insertBefore","backgroundColor","autoFittedLocationSize","controls","getMaxMazeHeight","windowHeight","innerHeight","clientHeight","mazeMenu","scrollHeight","computeMazeHeight","getMaxMazeWidthCallback","maxMazeHeight","getDefaults","backtracked","prev","curr","stack","interval","delay","indexOf","spd","loadOptions","co","webColors","hsl","loadCanvas","longest","getContext","width","height","seal","onPath","isCharacter","getConnectingColor","defaultColor","fluctuateColor","randomInRangeInDomain","range","domain","doWrap","min","rangeIdx","h","hue","saturation","lightness","fillStyle","fillRect","controlsView","randomBrightWebColor","one","clr","ls","tm","floor","getColor","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","parseInt","match","brights","Number","isInteger","num","Array","prototype","searchElement","fromIndex","TypeError","len","clearInterval","atEnd","reset","ep","exploreNextLocation","colorBacktracking","next","getNextLocation","paintRoute","loc","nextLocOpts","doReset","setInterval","arr","rnd","tmp","marginTop"],"mappings":"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","file":"text-maze.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var textMaze = require('text-maze');\n\ntextMaze.init({\n    currentlyShowingText: true,\n    useSpeedMeter: true,\n    colors: {\n        randomize: true,\n        fluctuate: true\n    }\n});\n","'use strict';\n\nvar CharMaps = require('./CharacterMaps');\n\n// The locations in the maze that together compose a single embedded\n// character are represented by a single Character instance. Each location\n// in the maze that isn't part of an embedded character is represented\n// by its own Character instance created with the initBlank function.\nmodule.exports = {\n\n    // Init a blank/non character.\n    initBlank: function() {\n        this.ch                       = null;\n        this.topLeftX                 = null;\n        this.topLeftY                 = null;\n        this.connected                = false;\n        this.spaceCharConnectionArray = null;\n    },\n\n    // Init a normal character.\n    init: function(ch, topLeftX, topLeftY) {\n\n        if (arguments.length != 3) {\n            throw new Error('Invalid number of arguments to Character init function');\n        }\n\n        // An ascii character.\n        this.ch = ch;\n\n        // Coordinates of the top left location in the maze for this Character.\n        this.topLeftX = topLeftX;\n        this.topLeftY = topLeftY;\n\n        // Set to 'yes' when this Character becomes connected as a path in the maze.\n        this.connected = false;\n\n        // Indicates which location in a space Character are connected as a path in the maze.\n        this.spaceCharConnectionArray = null;\n    },\n\n    // Used to flatten/simplify a location in the maze for easier rendering and use.\n    flattenCharacter: function(x, y, colors) {\n\n        var flattened = {\n            // A maze location visited while searching for the solution.\n            visited: false,\n            // A maze location on the maze's solution path.\n            solution: false,\n            // The location's current color.\n            color: colors.unvisited\n        };\n\n        // Convert the maze indices to indices into the character's map.\n        x = x - this.topLeftX;\n        y = y - this.topLeftY;\n\n        // Adds the properties 'path' and 'connection' to flattened.\n        // Note: connection is meaningless unless path == 1.\n        // If path == 0:                    location is not a path in the maze.\n        // If path == 1:                    location is     a path in the maze.\n        // If path == 1 && connection == 0: location is     a character.\n        // If path == 1 && connection == 1: location is not a character.\n        switch (true) {\n\n            // Blank/non character:\n            case this.ch === null:\n                flattened.path = this.connected ? true : false;\n                flattened.connection = this.connected ? true : false;\n                break;\n\n            // Space character: use its special connection array.\n            case this.ch === ' ':\n                flattened.path = this.spaceCharConnectionArray[y] ? true : false;\n                flattened.connection = this.spaceCharConnectionArray[y] ? true : false;\n                break;\n\n            // Exclamation point blank spot: make it a connection.\n            case this.ch === '!' && x === 0 && y === 3:\n                flattened.path = true;\n                flattened.connection = true;\n                break;\n\n            // Question mark blank spot: mike it a conneciton.\n            case this.ch === '?' && x === 1 && y === 3:\n                flattened.path = true;\n                flattened.connection = true;\n                break;\n\n            // Special two-space pad character.\n            case this.ch === '*':\n                flattened.path = CharMaps.getBitAtLocationInChar(this.ch, x, y) ? true : false;\n                flattened.connection = flattened.path ? true : false;\n                break;\n\n            // Any other character.\n            default:\n                flattened.path = CharMaps.getBitAtLocationInChar(this.ch, x, y) ? true : false;\n                flattened.connection = false;\n        }\n\n        return flattened;\n    }\n};\n","'use strict';\n\nmodule.exports = {\n\n    // Clean the text that is to be rendered in the maze\n    cleanText: function(text) {\n        return text\n            .replace(/[^A-Za-z0-9 .?!']/g, '') // Remove blacklisted characters\n            .replace(/\\s+/g, ' ')              // Reduce contiguous whitespace to a single space\n            .replace(/(^\\s+|\\s+$)/g, '');      // Trim whitespace\n    },\n\n    // Return the height of a character's bitmap, which is the height (in\n    // maze locations) the character will require in the maze\n    getCharHeight: function() {\n        return this._A.map.length;\n    },\n\n    // Return the length of a row in a character's bitmap, which is the length\n    // (in maze locations) the character will require in the maze\n    getLengthOfCharInMaze: function(ch) {\n        return this._getChar(ch)[0].length;\n    },\n\n    // Return a copy of a row of a character's bitmap\n    getRowOfChar: function(ch, idx) {\n        return this._getChar(ch)[idx].slice();\n    },\n\n    // Returns the bit in a character at the given coordinates\n    getBitAtLocationInChar: function(ch, x, y) {\n        return this._getChar(ch)[y][x];\n    },\n\n    // Return a bitmap array that indicates where the maze can be connected to\n    // a character on a particular side of that character\n    //\n    // @param ch: The character in ascii\n    // @param side: One of: top right bottom left\n    getConnectionOptsForSideOfChar: function(ch, side) {\n        var i, bitmap, charMap = this._getChar(ch);\n\n        // Let any character connect to a space character at any location in the space\n        if (ch === ' ') {\n            return [1,1,1,1,1];\n        }\n\n        switch (side) {\n\n            // Return the top row in the character's bitmap\n            case 'top':\n                return charMap[0].slice();\n\n            // Return an array with the values at the end of each row in the character\n            case 'right':\n                bitmap = [];\n                for (i = 0; i < this.getCharHeight(); i++) {\n                    bitmap.push(charMap[i][charMap[i].length - 1]);\n                }\n                return bitmap;\n\n            // Return the bottom row in the character bitmap\n            case 'bottom':\n                return charMap[this.getCharHeight() - 1].slice();\n\n            // Return an array with the values at the end of each row in the character\n            case 'left':\n                bitmap = [];\n                for (i = 0; i < this.getCharHeight(); i++) {\n                    bitmap.push(charMap[i][0]);\n                }\n                return bitmap;\n            default:\n                throw new Error(\"Param 'side' requires one of: top right bottom left\");\n        }\n    },\n\n    // Internal function to get a character's bitmap\n    _getChar: function(ch) {\n        switch (ch) {\n            case ' ':\n                return this._Space.map;\n            case '.':\n                return this._Period.map;\n            case '?':\n                return this._Question.map;\n            case '!':\n                return this._Exclamation.map;\n            case \"'\":\n                return this._Apostrophe.map;\n            case \"*\":\n                return this._TwoSpacePad.map;\n            case '-':\n                return this._Hyphen.map;\n        }\n\n        return this['_' + ch.toUpperCase()].map;\n    },\n\n    _A: {\n        map: [\n          [1,1,1],\n          [1,0,1],\n          [1,1,1],\n          [1,0,1],\n          [1,0,1]\n        ],\n    },\n    _B: {\n        map: [\n          [1,1,1,0],\n          [1,0,1,0],\n          [1,1,1,1],\n          [1,0,0,1],\n          [1,1,1,1]\n        ],\n    },\n    _C: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,0,0],\n          [1,0,0],\n          [1,1,1]\n        ],\n    },\n    _D: {\n        map: [\n          [1,1,1,0],\n          [1,0,1,1],\n          [1,0,0,1],\n          [1,0,1,1],\n          [1,1,1,0]\n        ],\n    },\n    _E: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,1,1],\n          [1,0,0],\n          [1,1,1]\n        ],\n    },\n    _F: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,1,1],\n          [1,0,0],\n          [1,0,0]\n        ],\n    },\n    _G: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,0,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _H: {\n        map: [\n          [1,0,1],\n          [1,0,1],\n          [1,1,1],\n          [1,0,1],\n          [1,0,1]\n        ],\n    },\n    _I: {\n        map: [\n          [1,1,1],\n          [0,1,0],\n          [0,1,0],\n          [0,1,0],\n          [1,1,1]\n        ],\n    },\n    _J: {\n        map: [\n          [0,0,1],\n          [0,0,1],\n          [0,0,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _K: {\n        map: [\n          [1,0,0,1],\n          [1,0,1,1],\n          [1,1,1,0],\n          [1,0,1,1],\n          [1,0,0,1]\n        ],\n    },\n    _L: {\n        map: [\n          [1,0,0],\n          [1,0,0],\n          [1,0,0],\n          [1,0,0],\n          [1,1,1]\n        ],\n    },\n    _M: {\n        map: [\n          [1,1,1,1,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1]\n        ],\n    },\n    _N: {\n        map: [\n          [1,1,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,1,1]\n        ],\n    },\n    _O: {\n        map: [\n          [1,1,1],\n          [1,0,1],\n          [1,0,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _P: {\n        map: [\n          [1,1,1],\n          [1,0,1],\n          [1,1,1],\n          [1,0,0],\n          [1,0,0]\n        ],\n    },\n    _Q: {\n        map: [\n          [1,1,1,0],\n          [1,0,1,0],\n          [1,0,1,0],\n          [1,0,1,0],\n          [1,1,1,1]\n        ],\n    },\n    _R: {\n        map: [\n          [1,1,1,0],\n          [1,0,1,0],\n          [1,1,1,0],\n          [1,0,1,1],\n          [1,0,0,1]\n        ],\n    },\n    _S: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,1,1],\n          [0,0,1],\n          [1,1,1]\n        ],\n    },\n    _T: {\n        map: [\n          [1,1,1],\n          [0,1,0],\n          [0,1,0],\n          [0,1,0],\n          [0,1,0]\n        ],\n    },\n    _U: {\n        map: [\n          [1,0,1],\n          [1,0,1],\n          [1,0,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _V: {\n        map: [\n          [1,0,1],\n          [1,0,1],\n          [1,0,1],\n          [1,1,1],\n          [0,1,0]\n        ],\n    },\n    _W: {\n        map: [\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,1,1,1,1]\n        ],\n    },\n    _X: {\n        map: [\n          [1,0,1],\n          [1,1,1],\n          [0,1,0],\n          [1,1,1],\n          [1,0,1]\n        ],\n    },\n    _Y: {\n        map: [\n          [1,0,1],\n          [1,0,1],\n          [1,1,1],\n          [0,0,1],\n          [1,1,1]\n        ],\n    },\n    _Z: {\n        map: [\n          [1,1,1,1],\n          [0,0,1,0],\n          [0,1,1,0],\n          [0,1,0,0],\n          [1,1,1,1]\n        ],\n    },\n    _0: {\n        map: [\n          [1,1,1],\n          [1,0,1],\n          [1,0,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _1: {\n        map: [\n          [0,1,0],\n          [1,1,0],\n          [0,1,0],\n          [0,1,0],\n          [1,1,1]\n        ],\n    },\n    _2: {\n        map: [\n          [1,1,1],\n          [0,0,1],\n          [1,1,1],\n          [1,0,0],\n          [1,1,1]\n        ],\n    },\n    _3: {\n        map: [\n          [1,1,1],\n          [0,0,1],\n          [1,1,1],\n          [0,0,1],\n          [1,1,1]\n        ],\n    },\n    _4: {\n        map: [\n          [1,0,1],\n          [1,0,1],\n          [1,1,1],\n          [0,0,1],\n          [0,0,1]\n        ],\n    },\n    _5: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,1,0],\n          [0,1,1],\n          [1,1,0]\n        ],\n    },\n    _6: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,1,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _7: {\n        map: [\n          [1,1,1],\n          [0,0,1],\n          [0,0,1],\n          [0,0,1],\n          [0,0,1]\n        ],\n    },\n    _8: {\n        map: [\n          [1,1,1],\n          [1,0,1],\n          [1,1,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _9: {\n        map: [\n          [1,1,1],\n          [1,0,1],\n          [1,1,1],\n          [0,0,1],\n          [0,0,1]\n        ],\n    },\n    _Space: {\n        map: [\n          [0],\n          [0],\n          [0],\n          [0],\n          [0]\n        ],\n    },\n    _Period: {\n        map: [\n          [0],\n          [0],\n          [0],\n          [0],\n          [1]\n        ],\n    },\n    _Question: {\n        map: [\n          [1,1,1],\n          [0,0,1],\n          [0,1,1],\n          [0,0,0],\n          [0,1,0]\n        ],\n    },\n    _Exclamation: {\n        map: [\n          [1],\n          [1],\n          [1],\n          [0],\n          [1]\n        ],\n    },\n    _Apostrophe: {\n        map: [\n          [1],\n          [1],\n          [0],\n          [0],\n          [0]\n        ],\n    },\n    _Hyphen: {\n        map: [\n          [0,0],\n          [0,0],\n          [1,1],\n          [0,0],\n          [0,0]\n        ]\n    },\n    _TwoSpacePad: {\n        map: [\n          [1,0],\n          [1,0],\n          [1,1],\n          [0,1],\n          [0,1]\n        ]\n    }\n};\n","'use strict';\n\nvar CharMaps = require('./CharacterMaps');\n\n// Breaks the maze text into lines according to the maze's max width.\nmodule.exports = function(text, maxMazeWidth, locationSize) {\n\n    var i;\n\n    // Array of strings, one string for each line.\n    var lines = [''];\n\n    // Restrict to a whitelist of characters, and split on a space.\n    var words = CharMaps.cleanText(text).split(' ');\n\n    // Number of maze locations the current word will require horizontally.\n    var wordLen;\n\n    // Max length (in maze locations) of a line of text in the maze.\n    // Do not include maze border on either side (-2).\n    // So padding the line out with spaces is easy, keep the line another two\n    // less than the length between borders (-2).\n    var maxLineLen = maxMazeWidth / locationSize - 2 - 2;\n\n    // Length (in maze locations) of word spacing.\n    var wordSpacingLen = 4;\n\n    // State shared with hyphenate function.\n    var state = {\n\n        // Number of maze locations the current word will require horizontally.\n        currLineIdx: 0,\n\n        // Current length (in maze locations) of the current line of text.\n        lineLen: 0\n    };\n\n    for (i = 0; i < words.length; i++) {\n\n        wordLen = getWordLength(words[i]);\n\n        // If this is the very first word add it to the line, hyphenating if needed (special case).\n        if (state.lineLen === 0) {\n            if (wordLen > maxLineLen) {\n                hyphenateWord(lines, words[i], state, maxLineLen);\n            }\n            else {\n                lines[state.currLineIdx] += words[i];\n                state.lineLen += wordLen;\n            }\n        }\n\n        // If the current word fits on current line, add it to the line.\n        else if (state.lineLen + wordSpacingLen + wordLen <= maxLineLen) {\n            lines[state.currLineIdx] += ' ' + words[i];\n            state.lineLen += wordSpacingLen + wordLen;\n        }\n\n        // TODO Hyphenate words if line still has lots of space but and current word won't fit.\n\n        // If the current word fits on a new line, add it to a new line.\n        else if (wordLen <= maxLineLen) {\n            lines[++state.currLineIdx] = words[i];\n            state.lineLen = wordLen;\n        }\n\n        // The current word doesn't fit on the current line or a new line, so hyphenate it.\n        else {\n            ++state.currLineIdx;\n            hyphenateWord(lines, words[i], state, maxLineLen);\n        }\n    }\n\n    return lines;\n};\n\n// Returns the number of maze locations the word will require horizontally in the maze\n// including a single location between each character.\nfunction getWordLength(word) {\n    var i, length = 0, wordChars = word.split('');\n\n    // Space between each character in the maze.\n    var charSpacing = 1;\n\n    for (i = 0; i < wordChars.length; i++) {\n        length += CharMaps.getLengthOfCharInMaze(wordChars[i]);\n\n        // Add character spacing after each character but the last.\n        if (i < wordChars.length - 1) {\n            length += charSpacing;\n        }\n    }\n\n    return length;\n}\n\nfunction hyphenateWord(lines, word, state, maxLineLen) {\n\n    var i, chars = word.split('');\n\n    // The length (in maze locations) the next character will require in the maze.\n    var nextLen;\n\n    // The current length of the front part of the hyphenated word.\n    var length = 0;\n\n    // The parts to the left (front) and right (back) of the hyphen.\n    var front = '', back = '';\n\n    var wordLen;\n\n    var charSpacing = 1;\n\n    for (i = 0; i < chars.length; i++) {\n\n        nextLen = charSpacing + CharMaps.getLengthOfCharInMaze(chars[i]);\n\n        // Break if char overflows the maze; account hyphen's character spacing.\n        if (length + nextLen > maxLineLen - charSpacing - CharMaps.getLengthOfCharInMaze('-')) {\n            break;\n        }\n\n        front += chars[i];\n        length += nextLen;\n    }\n\n    // Add the front part to the current line.\n    lines[state.currLineIdx] = front + '-';\n\n    // The back part becomes the current word.\n    back = word.slice(front.length);\n    wordLen = getWordLength(back);\n\n    // Hyphenate again if necessary, or just add the back part to a new line.\n    if (wordLen > maxLineLen) {\n        ++state.currLineIdx;\n        hyphenateWord(lines, back, state, maxLineLen);\n    }\n    else {\n        lines[++state.currLineIdx] = back;\n        state.lineLen = wordLen;\n    }\n}\n","'use strict';\n\n// An object to represent one of a Character's four sides. For every Character\n// added as a path in the maze, its four sides (four Side objects) are added\n// to a list. The list is shuffled to randomly add other Characters to the maze's\n// path, by finding a Character opposite the side next chosen from the list.\nmodule.exports = {\n       \n    init: function(ofChar, whichSide) {\n\n        // A reference to the Character object this Side belongs to.\n        this.ofChar = ofChar;\n\n        // One of: top right bottom left\n        this.whichSide = whichSide;\n    },\n\n    // Returns the name of this Side's opposite side.\n    getNameOfOppositeSide: function() {\n\n        var lookupTable = {\n            'top': 'bottom',\n            'right': 'left',\n            'bottom': 'top',\n            'left': 'right'\n        };\n\n        return lookupTable[this.whichSide];\n    }\n};\n","'use strict';\n\nvar utils    = require('../../utils');\nvar CharMaps = require('../CharacterMaps');\n\n// Creates a connection array for each space Character in the maze that indicates\n// which locations in the space are to be considered connected as a path\n// in the maze.\nmodule.exports = function(maze, charlist) {\n\n    var i, j;\n    \n    // Coordinates for the current space Character.\n    var x, y;\n\n    // Locations in the space Character from loIdx to hiIdx indicate which part\n    // of the space Character is connected in the maze. This span, from low\n    // to high, intersects all connections coming into the space Character.\n    var loIdx, hiIdx;\n\n    var charHgt = CharMaps.getCharHeight();\n\n    // Helper when building the connection array after low and high indices are found.\n    var connect;\n\n    // 'true' indicates a location in a space Character connected in the maze.\n    var connections;\n\n    // Helper when building the connection array.\n    var stop;\n\n    // Create a connection array for each space Character.\n    for (i = 0; i < charlist.length; i++) {\n        if (charlist[i].ch === ' ') {\n            \n            // Set the coordinates for the current space Character.\n            x = charlist[i].topLeftX;\n            y = charlist[i].topLeftY;\n\n            loIdx = null;\n            hiIdx = null;\n\n            // Examine each location in the space Character to determine if it is connected\n            // as a path in the maze.\n            for (j = 0; j < charHgt; j++) {\n\n                switch (true) {\n\n                    // The top location in the space is connected from above, left or right.\n                    case j === 0 && (maze[y-1][x].connected || maze[y+j][x-1].connected || maze[y+j][x+1]):\n                        loIdx = j;\n                        break;\n\n                    // The current location in the space is connected from both left and right.\n                    case maze[y+j][x-1].connected && maze[y+j][x+1].connected:\n                        if (loIdx === null) {\n                            loIdx = j;\n                            hiIdx = j;\n                        }\n                        else {\n                            hiIdx = j;\n                        }\n                        break;\n\n                    // The current location in the space is connected from either the left or right.\n                    case maze[y+j][x-1].connected || maze[y+j][x+1].connected:\n                        if (loIdx === null) {\n                            loIdx = j;\n                        }\n                        else {\n                            hiIdx = j;\n                        }\n                        break;\n\n                    // The bottom location in the space is connected from below.\n                    case j === charHgt-1 && maze[y+j+1][x].connected:\n                        if (loIdx === null) {\n                            loIdx = j;\n                        }\n                        else {\n                            hiIdx = j;\n                        }\n                        break;\n                }\n            }\n\n            connections = [];\n\n            // At least two connections were made into the space, so connect from low\n            // to high in the space as a path in the maze, to connect these connections.\n            if (loIdx !== null && hiIdx !== null) {\n                for (j = 0; j < charHgt; j++) {\n                    if (j >= loIdx && j <= hiIdx) {\n                        connections.push(true);\n                    }\n                    else {\n                        connections.push(false);\n                    }\n                }\n            }\n\n            // Only one connection was made into the space, so the space is a dead\n            // end in the maze. Randomly choose some part of the space beginning\n            // from the connection point to connect as a path in the maze.\n            // i.e. set 'true' in the connection array, from loIdx to some other\n            // randomish index.\n            else if (loIdx !== null) {\n\n                switch (true) {\n\n                    // Connect from the top of the space to some random location lower\n                    // in the space.\n                    case loIdx === 0:\n                        connect = true;\n                        stop = utils.randomInRange(2, charHgt-1);\n\n                        for (j = 0; j < charHgt; j++) {\n                            if (j === stop) {\n                                connect = false;\n                            }\n                            connections.push(connect);\n                        }\n                        break;\n\n                    // Connect from the bottom of the space to some random location\n                    // higher in the space.\n                    case loIdx === charHgt - 1:\n                        connect = true;\n                        stop = utils.randomInRange(0, charHgt-3);\n\n                        for (j = charHgt-1; j >= 0; j--) {\n                            if (j === stop) {\n                                connect = false;\n                            }\n                            connections.unshift(connect);\n                        }\n                        break;\n\n                    // Connect from loIdx to the bottom of the space.\n                    case Math.random() > 0.5:\n                        connect = false;\n                        for (j = 0; j < charHgt; j++) {\n                            if (j === loIdx) {\n                                connect = true;\n                            }\n                            connections.push(connect);\n                        }\n                        break;\n\n                    // Connect from loIdx to the top of the space.\n                    default:\n                        connect = false;\n                        for (j = charHgt-1; j >= 0; j--) {\n                            if (j === loIdx) {\n                                connect = true;\n                            }\n                            connections.unshift(connect);\n                        }\n                }\n            }\n\n            // No other Characters connected to this space.\n            else {\n                connections = [0,0,0,0,0];\n            }\n\n            // Store the connection array in its corresponding space Character.\n            maze[y][x].spaceCharConnectionArray = connections;\n        }\n    }\n};\n","'use strict';\n\nvar utils    = require('../../utils');\nvar CharMaps = require('../CharacterMaps');\n\n// Returns a Character adjacent to the given side of a Character, or null if\n// the side has no adjacent Character\nmodule.exports = function(maze, side) {\n\n    var i;\n\n    // Coordinates of a Character in the maze\n    var x = -1, y = -1;\n\n    // Find coordinates of a Character adjacent to this Side\n    switch (side.whichSide) {\n\n        case 'top': \n            y = side.ofChar.topLeftY - 2;\n            x = getXCoordForRandomAdjacentChar(maze, side.ofChar, y);\n            break;\n\n        case 'right': \n            y = side.ofChar.topLeftY;\n            x = side.ofChar.topLeftX + CharMaps.getLengthOfCharInMaze(side.ofChar.ch) + 1;\n            break;\n\n        case 'bottom': \n            y = side.ofChar.topLeftY + CharMaps.getCharHeight() + 1;\n            x = getXCoordForRandomAdjacentChar(maze, side.ofChar, y);\n            break;\n\n        case 'left': \n            y = side.ofChar.topLeftY;\n            x = side.ofChar.topLeftX - 2;\n            break;\n\n        default:\n            throw new Error('Invalid side');\n    }\n\n    return isValidCharacterLoc(maze, x, y) ? maze[y][x] : null;\n};\n\n// Collect all x coordinates for Character into an array\nfunction getXCoordsOfChar(ch) {\n    var i, xCoords = [];\n\n    var charLen = CharMaps.getLengthOfCharInMaze(ch.ch);\n\n    for (i = ch.topLeftX; i < ch.topLeftX + charLen; i++) {\n        xCoords.push(i);\n    }\n\n    return xCoords;\n}\n\n// Returns true if the coordinates refer to a Character object in the maze\nfunction isValidCharacterLoc(maze, x, y) {\n    return y >= 0 &&\n           x >= 0 &&\n           y < maze.length &&\n           x < maze[y].length &&\n           typeof maze[y][x] === 'object' &&\n           'ch' in maze[y][x] &&\n           maze[y][x].ch !== null;\n}\n\n// A helper for finding Characters above or below another Character in the maze\n// Returns the x coord of a Character on the given row y that has x coordinates\n// overlapping those of the given character\nfunction getXCoordForRandomAdjacentChar(maze, character, y) {\n    var i;\n\n    // A shuffled list of all possible x coordinates for the adjacent Character\n    var xCoords = getXCoordsOfChar(character);\n\n    // Shuffle the possible x coordinates\n    utils.shuffleArrayInPlace(xCoords);\n\n    // Return the first x coordinate that refers to a Character object\n    for (i = 0; i < xCoords.length; i++) {\n        if (isValidCharacterLoc(maze, xCoords[i], y)) {\n            return xCoords[i];\n        }\n    }\n\n    // No adjacent Character objects found\n    return null;\n}\n","'use strict';\n\nvar utils    = require('../../utils');\nvar CharMaps = require('../CharacterMaps');\n\n// Creates a horizontal connection in the maze between two Characters that are\n// situated one beside the other such that their y coordinates are exactly the\n// same (all characters have a map of equal height).\nmodule.exports = function(maze, ch1Side, ch2) {\n\n    var i;\n\n    // Save some typing.\n    var ch1 = ch1Side.ofChar;\n\n    // Get connection options for each Character.\n    var ch1Opts = CharMaps.getConnectionOptsForSideOfChar(ch1.ch, ch1Side.whichSide);\n    var ch2Opts = CharMaps.getConnectionOptsForSideOfChar(ch2.ch, ch1Side.getNameOfOppositeSide());\n\n    // Get this connection's x coordinate.\n    var x = ch1.topLeftX < ch2.topLeftX ? ch2.topLeftX-1 : ch1.topLeftX-1;\n\n    var y;\n\n    var charHgt = CharMaps.getCharHeight();\n\n    // A random index from which to start the search for a connection; rolls over\n    // so all options are examined when necessary.\n    var idx = utils.randomInRange(0, charHgt - 1);\n\n    var specialCaseConnection;\n\n\n    // Query for a hardcoded special case connection, in case one exists. Make sure\n    // the query parameters are ordered correctly (left Character, right Character).\n    if (ch1.topLeftX < ch2.topLeftX) {\n        specialCaseConnection = findSpecialCase(ch1.ch, ch2.ch);\n    }\n    else {\n        specialCaseConnection = findSpecialCase(ch2.ch, ch1.ch);\n    }\n\n\n    // Now find a connection between the given characters, and set that connection in\n    // the maze between the Characters.\n\n\n    // Special case: A hardcoded special case was found, so use it: copy the bit array\n    // values into the maze between the Characters being connected.\n    if (specialCaseConnection) {\n        y = ch1.topLeftX < ch2.topLeftX ? ch2.topLeftY : ch1.topLeftY;\n\n        for (i = 0; i < specialCaseConnection.length; i++) {\n            if (specialCaseConnection[i]) {\n                // Set connected on the blank Characters that are part of the special\n                // connection.\n                maze[y][x].connected = true;\n            }\n            y++; \n        }\n\n        // Set connected on the unconnected Character.\n        ch2.connected = true;\n\n        return;\n    }\n\n    // Normal case: randomly choose a connection option compatible with\n    // both Characters.\n    for (i = 0; i < charHgt; i++) {\n\n        if (ch1Opts[idx] + ch2Opts[idx] === 2) {\n            // Set connected on the blank Character that makes the connection.\n            maze[ch2.topLeftY + idx][x].connected = true;\n\n            // Set connected on the unconnected Character.\n            ch2.connected = true;\n\n            return;\n        }\n\n        idx = (idx + 1) % charHgt;\n    }\n};\n\n// Returns the hardcoded special-case-connection bit array for leftChar\n// connecting to rightChar, if it exists, otherwise returns null.\nfunction findSpecialCase(leftChar, rightChar) {\n\n    // All the hardcoded special cases.\n    var cases = {\n        'BT': [1,1,1,0,0],\n        'B7': [1,1,1,0,0],\n        'B?': [1,1,1,0,0],\n        \"B'\": [0,1,1,0,0],\n        'C-': function() {\n            return Math.random() > 0.5 ? [1,1,1,0,0] : [0,0,1,1,1];\n        },\n        'DI': function() {\n            return Math.random() > 0.5 ? [1,1,0,0,0] : [0,0,0,1,1];\n        },\n        'DT': [1,1,0,0,0],\n        'DZ': function() {\n            return Math.random() > 0.5 ? [1,1,0,0,0] : [0,0,0,1,1];\n        },\n        'D7': [1,1,0,0,0],\n        'D.': [0,0,0,1,1],\n        'D?': [1,1,0,0,0],\n        'FJ': [0,0,1,1,0],\n        'F1': function() {\n            return Math.random() > 0.33 ? [1,1,0,0,0]\n                : Math.random() > 0.5 ? [0,1,1,0,0]\n                    : [0,0,1,1,1];\n        },\n        'F.': [0,0,1,1,1],\n        'I-': function() {\n            return Math.random() > 0.5 ? [1,1,1,0,0] : [0,0,1,1,1];\n        },\n        'K-': function() {\n            return Math.random() > 0.5 ? [0,1,1,0,0] : [0,0,1,1,0];\n        },\n        'LT': [1,1,1,1,1],\n        'LV': [0,0,0,1,1],\n        'L4': [0,0,1,1,1],\n        'L7': [1,1,1,1,1],\n        'L9': [0,0,1,1,1],\n        'L?': [1,1,1,1,1],\n        'L-': [0,0,1,1,1],\n        \"L'\": [0,1,1,1,1],\n        'L*': [0,0,1,1,1],\n        \"PJ\": [0,0,1,1,0],\n        'P.': [0,0,1,1,1],\n        'QT': [1,1,1,1,1],\n        'QV': [0,0,0,1,1],\n        'Q4': [0,0,1,1,1],\n        'Q7': [1,1,1,1,1],\n        'Q9': [0,0,1,1,1],\n        'Q?': [1,1,1,1,1],\n        'Q-': [0,0,1,1,1],\n        \"Q'\": [0,1,1,1,1],\n        'Q*': [0,0,1,1,1],\n        'RT': [1,1,1,1,0],\n        'R4': [0,0,1,1,0],\n        'R7': [1,1,1,1,0],\n        'R9': [0,0,1,1,0],\n        'R?': [1,1,1,1,0],\n        'R-': [0,0,1,1,0],\n        \"R'\": [0,1,1,1,0],\n        'R*': [0,0,1,1,0],\n        'TJ': [1,1,1,1,0],\n        'T1': [1,1,0,0,0],\n        'T.': [1,1,1,1,1],\n        'T-': [1,1,1,0,0],\n        'V.': [0,0,0,1,1],\n        'X-': function() {\n            return Math.random() > 0.5 ? [0,1,1,0,0] : [0,0,1,1,0];\n        },\n        'Z-': function() {\n            return Math.random() > 0.5 ? [1,1,1,0,0] : [0,0,1,1,1];\n        },\n        '1T': [1,1,1,1,1],\n        '1V': [0,0,0,1,1],\n        '14': [0,0,1,1,1],\n        '17': [1,1,1,1,1],\n        '19': [0,0,1,1,1],\n        '1?': [1,1,1,1,1],\n        '1-': [0,0,1,1,1],\n        \"1'\": [0,1,1,1,1],\n        '1*': [0,0,1,1,1],\n        '51': [0,0,0,1,1],\n        '5.': [0,0,0,1,1],\n        '5-': [0,0,1,1,0],\n        '.T': [1,1,1,1,1],\n        '.V': [0,0,0,1,1],\n        '.4': [0,0,1,1,1],\n        '.7': [1,1,1,1,1],\n        '.9': [0,0,1,1,1],\n        '.?': [1,1,1,1,1],\n        '.-': [0,0,1,1,1],\n        \".'\": [0,1,1,1,1],\n        '.*': [0,0,1,1,1],\n        '?J': [0,0,1,1,0],\n        '?.': [0,0,1,1,1],\n        '-I': function() {\n            return Math.random() > 0.5 ? [1,1,1,0,0] : [0,0,1,1,1];\n        },\n        '-J': [0,0,1,1,0],\n        '-T': [1,1,1,0,0],\n        '-X': function() {\n            return Math.random() > 0.5 ? [0,1,1,0,0] : [0,0,1,1,0];\n        },\n        '-Z': function() {\n            return Math.random() > 0.5 ? [1,1,1,0,0] : [0,0,1,1,1];\n        },\n        '-1': function() {\n            return Math.random() > 0.5 ? [0,1,1,0,0] : [0,0,1,1,1];\n        },\n        '-7': [1,1,1,0,0],\n        '-.': [0,0,1,1,1],\n        '-?': [1,1,1,0,0],\n        \"-'\": [0,1,1,0,0],\n        \"'J\": [0,1,1,1,0],\n        \"'.\": [0,1,1,1,1],\n        \"'-\": [0,1,1,0,0],\n        '*T': [1,1,1,0,0],\n        '*7': [1,1,1,0,0],\n        '*?': [1,1,1,0,0],\n        \"*'\": [1,1,1,0,0]\n    };\n\n    var result = null;\n\n    // Create the index into the cases hash.\n    var specialCase = '' + leftChar.toUpperCase() + rightChar.toUpperCase();\n\n    if (specialCase in cases) {\n        result = (typeof cases[specialCase] === 'function') ? cases[specialCase]() : cases[specialCase];\n    }\n\n    return result;\n}\n","'use strict';\n\nvar utils               = require('../../utils');\nvar findAdjacentChar    = require('./find-adjacent-character');\nvar connectHorizontally = require('./horizontally.js');\nvar connectVertically   = require('./vertically.js');\nvar CharacterSide       = require('./CharacterSide');\nvar connectSpaces       = require('./connect-spaces');\n\n// Builds the maze by connecting the embedded characters.\nmodule.exports = function(maze, charlist) {\n\n    // Create and push four Side objects onto the side list, one for\n    // each side of param 'character'.\n    function addSidesOfCharToSidelist(character, sidelist) {\n        var i, s, sides = ['top', 'right', 'bottom', 'left'];\n\n        for (i = 0; i < sides.length; i++) {\n            s = Object.create(CharacterSide);\n            s.init(character, sides[i]);\n\n            sidelist.push(s);\n        }\n    }\n\n    // Sides of Characters to be connected.\n    var side, sidelist = [];\n\n    // A Character adjacent to a given Side.\n    var adjChar;\n\n    // Start building from a random Character.\n    var startCharIdx = utils.randomInRange(0, charlist.length-1);\n\n    // Connect the first Character.\n    charlist[startCharIdx].connected = true;\n\n    // Add the first Character's sides to the side list.\n    addSidesOfCharToSidelist(charlist[startCharIdx], sidelist);\n\n    while (sidelist.length) {\n        utils.shuffleArrayInPlace(sidelist);\n\n        side = sidelist.pop();\n\n        // Sometimes an adjacent Character won't be found when looking above or below.\n        adjChar = findAdjacentChar(maze, side);\n\n        // Try to connect the side to the adjacent Character.\n        if (adjChar && !adjChar.connected) {\n            if (side.whichSide === 'left' || side.whichSide === 'right') {\n                connectHorizontally(maze, side, adjChar);\n            }\n            else {\n                connectVertically(maze, side, adjChar);\n            }\n\n            // Sometimes a vertical connection won't be made; in that case don't\n            // add the sides of the unconnnected adjacent Character.\n            if (adjChar.connected) {\n                addSidesOfCharToSidelist(adjChar, sidelist);\n            }\n        }\n    }\n\n    connectSpaces(maze, charlist);\n\n    return;\n};\n","'use strict';\n\nvar utils    = require('../../utils');\nvar CharMaps = require('../CharacterMaps');\n\n// Creates a vertical connection in the maze between two Characters that are\n// situated one above the other (their x coordinates overlap by at least one\n// column in the maze).\nmodule.exports = function(maze, ch1Side, ch2) {\n\n    var i;\n\n    // Save some typing.\n    var ch1 = ch1Side.ofChar;\n\n    // Get connection options for each Character.\n    var ch1Opts = CharMaps.getConnectionOptsForSideOfChar(ch1.ch, ch1Side.whichSide);\n    var ch2Opts = CharMaps.getConnectionOptsForSideOfChar(ch2.ch, ch1Side.getNameOfOppositeSide());\n\n    // Get this connection's static y coordinate.\n    var y = ch1.topLeftY < ch2.topLeftY ? ch2.topLeftY-1 : ch1.topLeftY-1;\n\n    // Get the length of each Character.\n    var ch1Len = CharMaps.getLengthOfCharInMaze(ch1.ch);\n    var ch2Len = CharMaps.getLengthOfCharInMaze(ch2.ch);\n\n    // Get the start index for looping through each Character's connection options\n    // based on where the Characters begin overlapping along the x axis.\n    var ch1Start = (ch1.topLeftX <= ch2.topLeftX) ? Math.abs(ch1.topLeftX - ch2.topLeftX) : 0;\n    var ch2Start = (ch1.topLeftX <= ch2.topLeftX) ? 0 : Math.abs(ch1.topLeftX - ch2.topLeftX);\n\n    // Get the length of the overlap in columns of the maze.\n    var overlap = (ch1Len-ch1Start <= ch2Len-ch2Start) ? ch1Len-ch1Start : ch2Len-ch2Start;\n\n    // Get the end index for looping through each Character's connection options.\n    var ch1End = ch1Start + overlap - 1;\n    var ch2End = ch2Start + overlap - 1;\n\n    // Choose a random start index within the start and end indices, and roll over to start\n    // when end is exceeded in the loop.\n    var ch1Idx = utils.randomInRange(ch1Start, ch1End);\n    var ch2Idx = ch2Start + ch1Idx - ch1Start;\n\n\n    // Loop for the length of the overlap\n    for (i = 0; i < overlap; i++) {\n \n        // Search for a column in the maze in which both Characters are able to connect.\n        if (ch1Opts[ch1Idx] + ch2Opts[ch2Idx] === 2) {\n            maze[y][ch2.topLeftX + ch2Idx].connected = true;\n            ch2.connected = true;\n            return;\n        }\n\n        // Roll over to start index when end is exceeded.\n        ch1Idx = ch1Idx > ch1End ? ch1Start : ch1Idx + 1;\n        ch2Idx = ch2Idx > ch2End ? ch2Start : ch2Idx + 1;\n    }\n\n    return;\n};\n","'use strict';\n\nvar CharMaps       = require('./CharacterMaps');\nvar Character      = require('./Character');\n\nmodule.exports = function(maze, charlist, lines) {\n\n    var i, j, k, l, ch;\n\n    var charHgt = CharMaps.getCharHeight();\n\n    // For initializing the Character objects.\n    var character, blank;\n\n    // Length of lines above and below a blank line.\n    // The larger of the two will be the numCharBlanksToAdd to the blank line.\n    var lenAbove, lenBelow, numCharBlanksToAdd;\n\n    // Add a blank line at the top of the maze.\n    maze.push([]);\n\n    // For each line of text.\n    for (i = 0; i < lines.length; i++) {\n\n        // Add arrays to the maze to build this line of text into the maze.\n        // Start each array with a blank Character to create the maze's left border.\n        for (j = 0; j < charHgt; j++) {\n            blank = Object.create(Character);\n            blank.initBlank();\n            maze.push([blank]);\n        }\n\n        // Add each character in the current line to the maze.\n        for (j = 0; j < lines[i].length; j++) {\n            ch = lines[i].charAt(j);\n\n            character = Object.create(Character);\n            character.init(ch, maze[maze.length - charHgt].length, maze.length - charHgt);\n            charlist.push(character);\n\n            // Add each row of the current Character's character map to the current\n            // line of text in the maze.\n            for (k = charHgt; k > 0; k--) {\n\n                // Push a reference to the current Char into each location in the maze that the Char occupies.\n                for (l = 0; l < CharMaps.getLengthOfCharInMaze(ch); l++) {\n                    maze[maze.length - k].push(character);\n                }\n\n                // Add spacing between characters using blank Character.\n                if (lines[i].length) {\n                    blank = Object.create(Character);\n                    blank.initBlank();\n                    maze[maze.length - k].push.call(maze[maze.length - k], blank);\n                }\n            }\n        }\n\n        // Add a blank line after every embeded line of text.\n        if (i < lines.length - 1) {\n            maze.push([]);\n        }\n    }\n\n    // Add a blank line at the bottom of the maze.\n    maze.push([]);\n\n    // Add blank Character to the blank lines.\n    for (i = 0; i < maze.length; i += 6) {\n        lenAbove = (i === 0) ? 0 : maze[i-1].length;\n\n        lenBelow = (i === maze.length-1) ? 0 : maze[i+1].length;\n\n        numCharBlanksToAdd = (lenAbove > lenBelow) ? lenAbove : lenBelow;\n\n        for (j = 0; j < numCharBlanksToAdd; j++) {\n            blank = Object.create(Character);\n            blank.initBlank();\n            maze[i].push(blank);\n        }\n    }\n\n    // Nothing to return; this module modifies its parameters 'maze' and 'charlist'\n    return;\n};\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function(maze) {\n    var x, y, i;\n\n    var locations = [];\n\n    for (y = 0; y < maze.length; y++) {\n        for (x = 0; x < maze[y].length; x++) {\n            locations.push([x, y]);\n        }\n    }\n\n    utils.shuffleArrayInPlace(locations);\n\n    for (i = 0; i < locations.length; i++) {\n        x = locations[i][0];\n        y = locations[i][1];\n\n        if (y > 0 && x > 0 && y < maze.length-1 && x < maze[y].length-1) {\n            if (!maze[y][x].path) {\n                checkAround(maze, x, y);\n            }\n        }\n    }\n};\n\nfunction checkAround(maze, x, y) {\n    var i, adjacent, addPath = false;\n\n    var onlyOneConnection = maze[y-1][x].path +\n                            maze[y+1][x].path +\n                            maze[y][x-1].path +\n                            maze[y][x+1].path === 1;\n\n    if (!onlyOneConnection) {\n        return false;\n    }\n\n    switch (true) {\n        case maze[y-1][x].path:\n            addPath = maze[y+1][x-1].path + maze[y+1][x+1].path === 0;\n            break;\n\n        case maze[y+1][x].path:\n            addPath = maze[y-1][x-1].path + maze[y-1][x+1].path === 0;\n            break;\n\n        case maze[y][x-1].path:\n            addPath = maze[y-1][x+1].path + maze[y+1][x+1].path === 0;\n            break;\n\n        case maze[y][x+1].path:\n            addPath = maze[y-1][x-1].path + maze[y+1][x-1].path === 0;\n    }\n\n    if (addPath) {\n        maze[y][x].path = true;\n        maze[y][x].connection = true;\n\n        adjacent = [[x,y-1], [x,y+1], [x-1,y], [x+1,y]];\n\n        utils.shuffleArrayInPlace(adjacent);\n\n        for (i = 0; i < adjacent.length; i++) {\n            x = adjacent[i][0];\n            y = adjacent[i][1];\n\n            if (!maze[y][x].path) {\n                if (y > 0 && x > 0 && y < maze.length-1 && x < maze[y].length-1) {\n                    checkAround(maze, x, y);\n                }\n            }\n        }\n    }\n}\n","'use strict';\n\n// Simplify the maze so it's easier to paint, solve, etc: each location in the\n// maze will reference its own object.\nmodule.exports = function(maze, state) {\n    var x, y, endpoints = state.endpoints;\n\n    for (y = 0; y < maze.length; y++) {\n        for (x = 0; x < maze[y].length; x++) {\n\n            maze[y][x] = maze[y][x].flattenCharacter(x, y, state.colors);\n        }\n    }\n\n    // Set the maze's start.\n    maze[endpoints.start.y][endpoints.start.x].start      = true;\n    maze[endpoints.start.y][endpoints.start.x].path       = true;\n    maze[endpoints.start.y][endpoints.start.x].connection = true;\n\n    // Set the end endpoint.\n    maze[endpoints.end.y][endpoints.end.x].end            = true;\n    maze[endpoints.end.y][endpoints.end.x].path           = true;\n    maze[endpoints.end.y][endpoints.end.x].connection     = true;\n};\n","'use strict';\n\nvar breakTextIntoLines = require('./break-text-into-lines');\nvar padLines           = require('./pad-lines');\nvar embedText          = require('./embed-text');\nvar connectCharacters  = require('./connect-characters/index');\nvar setEndpoints       = require('./set-endpoints');\nvar flatten            = require('./flatten');\nvar fillOut            = require('./fill-out');\nvar autoSize           = require('../load/auto-size');\n\nmodule.exports = function(state) {\n\n    var lines = breakTextIntoLines(state.text, state.maxMazeWidth, state.locationSize);\n\n    padLines(lines, state.maxMazeWidth, state.locationSize);\n\n    var maze = [];\n\n    // Ordered list of Character objects embedded in the maze.\n    var charlist = [];\n\n    embedText(maze, charlist, lines);\n\n    connectCharacters(maze, charlist);\n\n    verifyConnections(maze, state, lines, charlist);\n\n    setEndpoints(maze, state.endpoints);\n\n    flatten(maze, state);\n\n    fillOut(maze);\n\n    return maze;\n};\n\n// TODO Better vertical character connection alg.\n// Vertical connections don't always happen. For that reason the maze\n// is not always fully connected. This is a precaution/hack against\n// trying to render unconnected mazes. (It's a hack because auto-size\n// shouldn't be imported, and its functions shouldn't be copied into\n// this this one.\nfunction verifyConnections(maze, state, lines, charlist) {\n\n    function getMaxMazeWidth(mazeMargin, locationSize) {\n        var windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        var max         = windowWidth * (1 - mazeMargin * 2);\n\n        return max - (max % locationSize);\n    }\n\n    for (var i = 0; i < charlist.length; i++) {\n\n        if (!charlist[i].connected) {\n            document.getElementById('maze-text-input-ctrl').value = state.text;\n            document.getElementById('maze-reset-ctrl').removeAttribute('disabled');\n\n            // Build with text that will probably connect.\n            state.text = 'error! try again';\n\n            autoSize(state, getMaxMazeWidth);\n            lines = breakTextIntoLines(state.text, state.maxMazeWidth, state.locationSize);\n            maze = [];\n            charlist = [];\n            embedText(maze, charlist, lines);\n            connectCharacters(maze, charlist);\n\n            break;\n        }\n    }\n}\n","'use strict';\n\nvar CharMaps = require('./CharacterMaps');\n\nmodule.exports = function(lines, maxMazeWidth, locationSize) {\n    var i, j, chars, lineLen = 0;\n\n    var charSpacing = 1;\n\n    // Size does not include maze border on either side (-2).\n    var maxLineLen = maxMazeWidth / locationSize - 2;\n\n    for (i = 0; i < lines.length; i++) {\n\n        chars = lines[i].split('');\n\n        // Line length includes character spacing and a border at either end.\n        lineLen = charSpacing * (chars.length - 1);\n\n        // Add length of each character to the line length.\n        for (j = 0; j < chars.length; j++) {\n\n            lineLen += CharMaps.getLengthOfCharInMaze(chars[j]);\n        }\n\n        // Add special padding character to help pad to very end of line\n        // when num spaces to pad is odd.\n        if (maxLineLen - lineLen >= 3 && (maxLineLen - lineLen) % 2 === 1) {\n            lines[i] += '*';\n            lineLen += charSpacing + CharMaps.getLengthOfCharInMaze('*');\n        }\n\n        // Pad to end of line with spaces.\n        while (lineLen < maxLineLen) {\n            lines[i] += ' ';\n            lineLen += charSpacing + CharMaps.getLengthOfCharInMaze(' ');\n        }\n    }\n};\n","'use strict';\n\nvar CharMaps = require('./CharacterMaps');\n\n// Determine and set the coordinates for where the maze starts and ends.\nmodule.exports = function(maze, endpoints) {\n    var i, x, y, character, opts;\n\n    // Start the maze to the left of the first character.\n    character = maze[1][1];\n    opts = CharMaps.getConnectionOptsForSideOfChar(character.ch, 'left');\n\n    // Start adjacent to the highest part of the first character.\n    for (i = 0; i < opts.length; i++) {\n        if (opts[i]) {\n            endpoints.start.x = 0;\n            endpoints.start.y = i + 1;\n            break;\n        }\n    }\n\n    // End the maze to the right of the last character.\n    y = maze.length - CharMaps.getCharHeight() - 1;\n    x = maze[y].length - 2;\n\n    character = maze[y][x];\n\n    // If last character is a space, set its lower locations to connected\n    // so the maze's end can be in the very bottom corner.\n    if (character.ch === ' ') {\n        for (i = CharMaps.getCharHeight() - 1; i >= 0; i--) {\n            if (character.spaceCharConnectionArray[i]) {\n                break;\n            }\n            else {\n                character.spaceCharConnectionArray[i] = 1;\n            }\n        }\n\n        opts = character.spaceCharConnectionArray;\n    }\n    else {\n        opts = CharMaps.getConnectionOptsForSideOfChar(character.ch, 'right');\n    }\n\n    // End adjacent to the lowest possible part of the last character.\n    for (i = 0; i < opts.length; i++) {\n        if (opts[opts.length - 1 - i]) {\n            endpoints.end.x = x + 1;\n            endpoints.end.y = y + CharMaps.getCharHeight() - 1 - i;\n            break;\n        }\n    }\n};\n","'use strict';\n\nvar utils    = require('../utils');\nvar load     = require('../load/index');\nvar build    = require('../build/index');\nvar CharMaps = require('../build/CharacterMaps');\nvar paint    = require('../paint/index');\nvar solve    = require('../solve');\nvar view     = require('./view');\nvar mainView = require('../view');\n\nmodule.exports = {\n\n    // Initialize controls and register control listeners.\n    init: function(maze, canvas, state) {\n\n        var ctrls = {\n\n            // Rebuild the maze with current text.\n            'maze-rebuild-ctrl': {\n                action: function(evt) {\n                    maze = rebuild(maze, canvas, state);\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Toggle showing/hiding maze text.\n            'maze-show-text-ctrl': {\n                init: function() {\n                    view.updateShowingTextCtrl(state);\n                },\n                action: function(evt) {\n                    if (state.solve.showingSolution) {\n                        view.toggleShowingSolution();\n                    }\n                    state.currentlyShowingText = !state.currentlyShowingText;\n                    view.updateShowingTextCtrl(state, ctrls);\n                    solve.run(maze, canvas, state, true);\n                    paint.all(maze, canvas, state);\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // To ensure elements exist with these ids.\n            'maze-show-text-label': {},\n            'maze-hide-text-label': {},\n\n            // Toggle showing/hiding maze solution.\n            'maze-show-solution-ctrl': {\n                init: function() {\n                    view.updateShowingSolutionCtrl(state);\n                },\n                action: function(evt) {\n                    if (state.currentlyShowingText) {\n                        view.toggleShowingText();\n                    }\n                    view.updateShowingSolutionCtrl(state);\n                    solve.show(maze, canvas, state);\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // To ensure elements exist with these ids.\n            'maze-show-solution-label': {},\n            'maze-hide-solution-label': {},\n\n            // Start solve animation.\n            'maze-solve-start-ctrl': {\n                action: function(evt) {\n                    if (state.currentlyShowingText) {\n                        view.toggleShowingText();\n                    }\n                    solve.run(maze, canvas, state, false);\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Pause solve animation.\n            'maze-solve-pause-ctrl': {\n                init: function() {\n                    view.disableCtrl('maze-solve-pause-ctrl');\n                },\n                action: function(evt) {\n                    solve.run(maze, canvas, state, false);\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Reset solve animation.\n            'maze-solve-reset-ctrl': {\n                init: function() {\n                    view.disableCtrl('maze-solve-reset-ctrl');\n                },\n                action: function(evt) {\n                    solve.run(maze, canvas, state, true);\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Decrease solve animation speed.\n            'maze-decrease-speed-ctrl': {\n                action: function(evt) {\n                    adjustSpeed(maze, canvas, state, ctrls, state.solve.speed - 1, state.solve.speed);\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Increase solve animation speed.\n            'maze-increase-speed-ctrl': {\n                init: function() {\n                    view.injectSpeedMeter(state);\n                    view.colorSpeedMeter(state);\n                },\n                action: function(evt) {\n                    adjustSpeed(maze, canvas, state, ctrls, state.solve.speed + 1, state.solve.speed);\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Decrease size of paths in maze.\n            'maze-decrease-size-ctrl': {\n                action: function(evt) {\n                    var size = state.locationSize - 1;\n\n                    if (size >= utils.minLocationSize && size <= utils.maxLocationSize(state)) {\n                        load.setLocationSize(state, size);\n                        maze = rebuild(maze, canvas, state);\n                        view.updateSizeCtrls(state);\n                    }\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Increase size of paths in maze.\n            'maze-increase-size-ctrl': {\n                action: function(evt) {\n                    var size = state.locationSize + 1;\n\n                    if (size >= utils.minLocationSize && size <= utils.maxLocationSize(state)) {\n                        load.setLocationSize(state, size);\n                        maze = rebuild(maze, canvas, state);\n                        view.updateSizeCtrls(state);\n                    }\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Fit maze to screen.\n            'maze-auto-size-ctrl': {\n                init: function() {\n                    view.disableCtrl('maze-auto-size-ctrl');\n                },\n                action: function(evt) {\n                    load.autoSetLocationSize(state);\n                    maze = rebuild(maze, canvas, state);\n                    view.updateSizeCtrls(state);\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Rebuild the maze with user supplied text.\n            'maze-text-input-ctrl': {\n                init: function() {\n                    var input = document.getElementById('maze-text-input-ctrl');\n                    var reset = document.getElementById('maze-reset-ctrl');\n\n                    input.oninput = function() {\n\n                        // Enable the reset button even for blacklisted text.\n                        if (input.value !== state.originalText) {\n                            view.enableCtrl('maze-reset-ctrl');\n                        }\n                        else {\n                            view.disableCtrl('maze-reset-ctrl');\n                        }\n\n                        // Clean the text with CharMaps whitelist function.\n                        var text = CharMaps.cleanText(input.value);\n\n                        // Clear the previous timeout, if there was one, because more\n                        // input has arrived.\n                        clearTimeout(state.textChangeRebuildTimeout);\n\n                        // Use timeouts so each keystroke doesn't start an expensive rebuild.\n                        if (text) {\n                            state.textChangeRebuildTimeout = setTimeout(function() {\n                                state.text = input.value;\n                                load.autoSetLocationSize(state);\n                                maze = rebuild(maze, canvas, state);\n                                view.updateSizeCtrls(state);\n                            }, 300);\n                        }\n                    };\n\n                    input.onpropertychange = input.oninput;\n\n                    addListener('keypress', input, function(evt) {\n                        if (evt.keyCode == 13) {\n                            stopDefault(evt);\n                        }\n                    });\n                }\n            },\n\n            // Reset to original text.\n            'maze-reset-ctrl': {\n                init: function() {\n                    view.disableCtrl('maze-reset-ctrl');\n                },\n                action: function(evt) {\n                    state.text = state.originalText;\n                    load.autoSetLocationSize(state);\n                    maze = rebuild(maze, canvas, state);\n\n                    view.clearTextInput();\n                    view.updateSizeCtrls(state);\n                    view.disableCtrl('maze-reset-ctrl');\n\n                    stopDefault(evt);\n                },\n                type: 'click'\n            }\n        };\n\n        var id, e, c;\n\n        // Ensure control elements are present.\n        for (id in ctrls) {\n            if (!document.getElementById(id)) {\n                throw new Error(\"No element found with id '\" + id + \"'\");\n            }\n        }\n\n        // Initialize control with init function.\n        for (id in ctrls) {\n            e = document.getElementById(id);\n            if (e) {\n                c = ctrls[id];\n                if (c.hasOwnProperty('init')) {\n                    c.init();\n                }\n            }\n        }\n\n        // Register listeners for controls.\n        for (id in ctrls) {\n            e = document.getElementById(id);\n            c = ctrls[id];\n\n            if (c.hasOwnProperty('action') && c.hasOwnProperty('type')) {\n                addListener(c.type, e, c.action.bind(ctrls));\n            }\n            else if (c.hasOwnProperty('action')) {\n                c.action.bind(ctrls)();\n            }\n        }\n\n        // Add window resize listener to rebuild when window size changes.\n        addListener('resize', window, function(evt) {\n            clearTimeout(state.screenChangeRebuildTimeout);\n\n            state.screenChangeRebuildTimeout = setTimeout(function() {\n                load.autoSetLocationSize(state);\n                maze = rebuild(maze, canvas, state);\n                view.updateSizeCtrls(state);\n                mainView.setMazeTopMargin(state.mazeMargin);\n            }, 300);\n\n            stopDefault(evt);\n        });\n    }\n};\n\nfunction adjustSpeed(maze, canvas, state, ctrls, speed, prevSpeed) {\n    var continueRunning = false;\n\n    // Stop solving if solving.\n    if (state.solve.running) {\n        solve.run(maze, canvas, state);\n        continueRunning = true;\n    }\n\n    if (speed >= 1 && speed <= state.solve.animationDelays.length) {\n        state.solve.speed = speed;\n        view.updateSpeedCtrls(state);\n        view.colorSpeedMeter(state, prevSpeed);\n    }\n\n    // Continue solving if soving was stopped.\n    if (continueRunning) {\n        solve.run(maze, canvas, state);\n    }\n}\n\n// Rebuild the maze from scratch.\nfunction rebuild(maze, canvas, state) {\n\n    // First reset the solve module's state.\n    solve.run(maze, canvas, state, true);\n\n    maze = build(state);\n    load.canvas(maze, state);\n    paint.all(maze, canvas, state);\n\n    return maze;\n}\n\n// IE compatible prevent default.\nfunction stopDefault(evt) {\n    if (evt.preventDefault) {\n        evt.preventDefault();\n    }\n    else {\n        evt.returnValue = false;\n    }\n}\n\n// Use IE event listeners instead, when required.\nfunction addListener(type, elem, func) {\n    if (elem.addEventListener) {\n        elem.addEventListener(type, func, false);\n    }\n    else {\n        elem.attachEvent('on' + type, func);\n    }\n}\n","'use strict';\n\nvar utils = require('../utils');\n\n// Utilities allowing the solve module to update relevant controls.\nmodule.exports = {\n\n    updateShowingSolutionCtrl: function(state) {\n        if (state.solve.showingSolution) {\n            document.getElementById('maze-show-solution-label').style.display = 'none';\n            document.getElementById('maze-hide-solution-label').style.display = 'inline';\n        }\n        else {\n            document.getElementById('maze-show-solution-label').style.display = 'inline';\n            document.getElementById('maze-hide-solution-label').style.display = 'none';\n        }\n    },\n\n    updateShowingTextCtrl: function(state) {\n        if (state.currentlyShowingText) {\n            document.getElementById('maze-show-text-label').style.display = 'none';\n            document.getElementById('maze-hide-text-label').style.display = 'inline';\n        }\n        else {\n            document.getElementById('maze-show-text-label').style.display = 'inline';\n            document.getElementById('maze-hide-text-label').style.display = 'none';\n        }\n    },\n\n    disableCtrl: function(ctrlId) {\n        document.getElementById(ctrlId).setAttribute('disabled', 'disabled');\n    },\n\n    enableCtrl: function(ctrlId) {\n        document.getElementById(ctrlId).removeAttribute('disabled');\n    },\n\n    toggleShowingText: function() {\n        document.getElementById('maze-show-text-ctrl').click();\n    },\n\n    toggleShowingSolution: function() {\n        document.getElementById('maze-show-solution-ctrl').click();\n    },\n\n    clearTextInput: function() {\n        document.getElementById('maze-text-input-ctrl').value = '';\n    },\n\n    updateSpeedCtrls: function(state) {\n        switch (state.solve.speed) {\n            case 1:\n                document.getElementById('maze-decrease-speed-ctrl').setAttribute('disabled', 'disabled');\n                document.getElementById('maze-increase-speed-ctrl').removeAttribute('disabled');\n                break;\n            case state.solve.animationDelays.length:\n                document.getElementById('maze-decrease-speed-ctrl').removeAttribute('disabled');\n                document.getElementById('maze-increase-speed-ctrl').setAttribute('disabled', 'disabled');\n                break;\n            default:\n                document.getElementById('maze-decrease-speed-ctrl').removeAttribute('disabled');\n                document.getElementById('maze-increase-speed-ctrl').removeAttribute('disabled');\n        }\n    },\n\n    // Works with bootstrap in btn-group.\n    injectSpeedMeter: function(state) {\n        var i, newNode, parentNode, childNode;\n\n        if (state.useSpeedMeter) {\n            childNode = document.getElementById('maze-increase-speed-ctrl');\n\n            if (childNode) {\n                for (i = 0; i < state.solve.animationDelays.length; i++) {\n                    newNode = document.createElement('div');\n                    newNode.id = 'maze-meter-' + (i + 1);\n                    newNode.className = 'maze-meter btn btn-default';\n                    newNode.setAttribute('disabled', 'disabled');\n                    newNode.innerHTML = '&nbsp;';\n                    childNode.parentNode.insertBefore(newNode, childNode);\n                }\n            }\n        }\n    },\n\n    // @param oldSpeed: (optional) Set to null if just updating meter color, or set to the previous\n    // speed when the speed is changed to uncolor the previous speed's location in the meter.\n    colorSpeedMeter: function(state, prevSpeed) {\n        var i, speed;\n\n        if (state.useSpeedMeter) {\n            speed = state.solve.speed;\n\n            if (state.currentlyShowingText) {\n                document.getElementById('maze-meter-' + speed).style.backgroundColor = state.colors.text;\n            }\n            else if (state.solve.showingSolution || state.solve.running) {\n                document.getElementById('maze-meter-' + speed).style.backgroundColor = state.colors.solution;\n            }\n            else {\n                document.getElementById('maze-meter-' + speed).style.backgroundColor = 'black';\n            }\n\n            if (prevSpeed) {\n                document.getElementById('maze-meter-' + prevSpeed).style.backgroundColor = state.colors.unvisited;\n            }\n        }\n    },\n\n    updateSizeCtrls: function(state) {\n        if (state.locationSize === utils.minLocationSize) {\n            document.getElementById('maze-decrease-size-ctrl').setAttribute('disabled', 'disabled');\n        }\n        else {\n            document.getElementById('maze-decrease-size-ctrl').removeAttribute('disabled');\n        }\n\n        if (state.locationSize === utils.maxLocationSize(state)) {\n            document.getElementById('maze-increase-size-ctrl').setAttribute('disabled', 'disabled');\n        }\n        else {\n            document.getElementById('maze-increase-size-ctrl').removeAttribute('disabled');\n        }\n\n        if (state.locationSize === state.autoFittedLocationSize) {\n            document.getElementById('maze-auto-size-ctrl').setAttribute('disabled', 'disabled');\n        }\n        else {\n            document.getElementById('maze-auto-size-ctrl').removeAttribute('disabled');\n        }\n    }\n};\n","'use strict';\n\n// Polyfill some ES6 features.\nrequire('./polyfill');\n\nvar load     = require('./load');\nvar build    = require('./build/index');\nvar paint    = require('./paint');\nvar controls = require('./controls');\nvar view     = require('./view');\n\nmodule.exports = {\n\n    init: function(text, opts) {\n\n        this.state  = load.state(text, opts);\n\n        this.maze   = build(this.state);\n\n        this.canvas = load.canvas(this.maze, this.state);\n\n        controls.init(this.maze, this.canvas, this.state);\n\n        view.setMazeTopMargin(this.state.mazeMargin);\n\n        paint.all(this.maze, this.canvas, this.state);\n    }\n};\n","'use strict';\n\nvar utils              = require('../utils');\nvar breakTextIntoLines = require('../build/break-text-into-lines');\nvar CharMaps           = require('../build/CharacterMaps');\n\n// Set locationSize and maxMazeWidth to best fit the screen.\nmodule.exports = function(state, getMaxMazeWidthCallback) {\n\n    // Begin with the smallest location size, then test while increasing it.\n    var locationSize = utils.minLocationSize;\n\n    // Static max height.\n    var maxMazeHeight = getMaxMazeHeight(state);\n\n    var maxMazeWidth  = getMaxMazeWidthCallback(state.mazeMargin, locationSize);\n    var lines = breakTextIntoLines(state.text, maxMazeWidth, locationSize);\n\n    while (computeMazeHeight(lines, locationSize) <= maxMazeHeight) {\n        locationSize++;\n\n        maxMazeWidth = getMaxMazeWidthCallback(state.mazeMargin, locationSize);\n        lines = breakTextIntoLines(state.text, maxMazeWidth, locationSize);\n    }\n\n    // Location size is too big when the loop ends, so decrement it.\n    state.locationSize = locationSize > utils.minLocationSize ? locationSize - 1 : locationSize;\n\n    state.autoFittedLocationSize = state.locationSize;\n\n    state.maxMazeWidth = getMaxMazeWidthCallback(state.mazeMargin, state.locationSize);\n};\n\n// Returns the max height, which depends on the screen height and the margin size.\nfunction getMaxMazeHeight(state) {\n    var windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var mazeMenu     = document.getElementById('maze-menu');\n\n    // Subtract the maze menu's height.\n    if (mazeMenu) {\n        return (windowHeight - mazeMenu.scrollHeight) * (1 - state.mazeMargin * 2);\n    }\n    return windowHeight * (1 - state.mazeMargin * 2);\n}\n\n// Returns the height the maze will be in pixels given the number of lines\n// of text in the maze and the location size.\nfunction computeMazeHeight(lines, locationSize) {\n    var charHgt = CharMaps.getCharHeight();\n\n    return locationSize * (charHgt * lines.length + lines.length + 1);\n}\n","'use strict';\n\nvar utils     = require('../utils');\nvar webColors = require('../paint/web-colors');\nvar autoSize  = require('./auto-size');\n\n// Load maze state/options, and the canvas context for maze rendering.\nmodule.exports = {\n\n    // Get the app's main state object with default and optionally-configured values.\n    state: function(opts) {\n        var state = loadOptions(getDefaults(), opts);\n\n        autoSize(state, getMaxMazeWidth);\n\n        return Object.seal(state);\n    },\n\n    // Initialize the html canvas.\n    canvas: function(maze, state) {\n        return loadCanvas(maze, state);\n    },\n\n    // Helper for loading state before rebuilding the maze with a different location size.\n    setLocationSize: function(state, locationSize) {\n        state.locationSize = locationSize;\n        state.maxMazeWidth = getMaxMazeWidth(state.mazeMargin, state.locationSize);\n    },\n\n    // Helper for loading state before rebuilding the maze with a different location size.\n    autoSetLocationSize: function(state) {\n        autoSize(state, getMaxMazeWidth);\n    }\n};\n\nfunction getDefaults() {\n    return {\n        text:         'Hope means hoping when things are hopeless, or it is no virtue at all. G.K.C.',\n        originalText: 'Hope means hoping when things are hopeless, or it is no virtue at all. G.K.C.',\n        currentlyShowingText: false,\n\n        // Speed meter is designed to be rendered in a bootstrap css btn-group class.\n        useSpeedMeter: false,\n\n        // Minimum margin rendered between screen edges and the maze.\n        mazeMargin: 0.1,\n\n        // Timeouts to keep from immediately rebuilding on text change or screen resize.\n        textChangeRebuildTimeout: null,\n        screenChangeRebuildTimeout: null,\n\n        // Size parameters set by the auto-size module.\n        locationSize: null,\n        autoFittedLocationSize: null,\n        maxMazeWidth: null,\n\n        // Maze start and end.\n        endpoints: {\n            start: {\n                'x': null,\n                'y': null\n            },\n            end: {\n                'x': null,\n                'y': null\n            }\n        },\n\n        // Rendering/painting colors.\n        colors: {\n            text:        'black',\n            solution:    'black',\n            backtracked: 'lightgray',\n            unvisited:   'white',\n            randomize:   false,\n            fluctuate:   false\n        },\n\n        // State used to show the solution and auto-solve the maze.\n        solve: {\n            showingSolution: false,\n            running:         false,\n\n            // Locations in the maze while solving.\n            prev:            null,\n            curr:            { 'x': null, 'y': null },\n            stack:           [],\n\n            // Interval timing parameters for animating finding the maze solution.\n            interval:        null,\n            delay:           40,\n            animationDelays: [640, 320, 160, 80, 40, 20, 10, 5, 0],\n            get speed() {\n                // The speed is one more than the index of the current animation delay.\n                return this.animationDelays.indexOf(this.delay) + 1;\n            },\n            set speed(spd) {\n                if (spd < 1 || spd > this.animationDelays.length) {\n                    throw new Error('Invalid solve speed: ' + spd);\n                }\n                this.delay = this.animationDelays[spd - 1];\n            }\n        }\n    };\n}\n\n// Load optional user-defined configuration.\nfunction loadOptions(state, opts) {\n    var o, co;\n\n    if (opts && typeof opts !== 'object') {\n        throw new Error(\"Maze init requires an 'opts' object\");\n    }\n\n    for (o in opts) {\n        if (opts.hasOwnProperty(o)) {\n            switch (o) {\n\n                case 'text':\n                    if (typeof opts.text === 'string' && opts.text.length > 0) {\n                        state.text         = opts.text;\n                        state.originalText = opts.text;\n                    }\n                    else {\n                        throw new Error(\"Maze option 'text' must be a non-empty string\");\n                    }\n                    break;\n\n                case 'currentlyShowingText':\n                case 'useSpeedMeter':\n                    if (typeof opts[o] === 'boolean') {\n                        state[o] = opts[o];\n                    }\n                    else {\n                        throw new Error(\"Maze option '\" + o + \"' must be a boolean\");\n                    }\n                    break;\n\n                case 'colors':\n                    if (typeof opts.colors === 'object') {\n                        for (co in opts.colors) {\n                            switch (co) {\n\n                                case 'text':\n                                case 'solution':\n                                    if (webColors.hsl(opts.colors[co])) {\n                                        state.colors[co] = opts.colors[co];\n                                    }\n                                    else {\n                                        throw new Error(\"Invalid value '\" + opts.colors[co] + \"' for maze color option '\" + co + \"' (must be a web color name)\");\n                                    }\n                                    break;\n\n                                case 'fluctuate':\n                                case 'randomize':\n                                    if (typeof opts.colors[co] === 'boolean') {\n                                        state.colors[co] = opts.colors[co];\n                                    }\n                                    else {\n                                        throw new Error(\"Maze color option '\" + co + \"' must be a boolean\");\n                                    }\n                                    break;\n\n                                default:\n                                    throw new Error(\"Invalid maze color option '\" + co + \"'\");\n                            }\n                        }\n                    }\n                    break;\n\n                default:\n                    throw new Error(\"Unknown maze option: '\" + o + \"'\");\n            }\n        }\n    }\n\n    return state;\n}\n\n// Sets the canvas element's size and gets its context for rendering the maze.\nfunction loadCanvas(maze, state) {\n    var i, longest = 0;\n\n    var canvas = document.getElementById('text-maze');\n\n    if (!canvas) {\n        throw Error(\"Cannot find a canvas tag with id of 'text-maze'\");\n    }\n\n    if (!canvas.getContext) {\n        throw Error(\"Canvas getContext property does not exist\");\n    }\n\n    // Find the longest row in the maze.\n    for (i = 0; i < maze.length; i++) {\n        if (maze[i].length > longest) {\n            longest = maze[i].length;\n        }\n    }\n\n    canvas.width  = longest * state.locationSize;\n    canvas.height = maze.length * state.locationSize;\n\n    return canvas.getContext('2d');\n}\n\n// Returns the maximum width the maze can be based on the screen size and maze margin.\nfunction getMaxMazeWidth(mazeMargin, locationSize) {\n    var windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var max         = windowWidth * (1 - mazeMargin * 2);\n\n    // The max width must be a multiple of the maze location size.\n    return max - (max % locationSize);\n}\n","'use strict';\n\nvar utils        = require('../utils');\nvar controlsView = require('../controls/view');\nvar webColors    = require('./web-colors');\n\n// Paint a single location or all locations in the maze.\nmodule.exports = {\n\n    // Paint the entire maze.\n    all: function(maze, canvas, state) {\n        var x, y;\n\n        var width  = state.maxMazeWidth * state.locationSize;\n        var height = maze.length  * state.locationSize;\n\n        // Get random colors to paint with if configured to do so.\n        if (state.colors.randomize) {\n            state.colors.text     = webColors.randomBrightWebColor();\n            state.colors.solution = state.colors.text;\n\n            controlsView.colorSpeedMeter(state, null);\n        }\n\n        // White-wash the canvas.\n        paint(canvas, state.colors.unvisited, 0, 0, width, height);\n\n        for (y = 0; y < maze.length; y++) {\n            for (x = 0; x < maze[y].length; x++) {\n                // Paint one location.\n                this.one(maze, canvas, state, x, y);\n            }\n        }\n    },\n\n    // Paint a single location in the maze.\n    one: function(maze, canvas, state, x, y) {\n        var colors = state.colors;\n        var ls     = state.locationSize;\n        var clr;\n\n        // Half border: half the width of the maze's borders.\n        var hb = 1;\n\n        // Old half border: changed based on location size.\n        // var hb = Math.floor(ls / 6) || 1;\n\n        // Text margin: margin between the text and borders.\n        var tm = ls < 10 ? 0 : Math.floor(ls / 5) - 1;\n\n        if (onPath(maze, x, y)) {\n\n            clr = 'black';\n\n            // Paint borders: top/right/bottom/left.\n            if (!onPath(maze, x, y-1)) {\n                paint(canvas, clr, x*ls-hb, y*ls-hb, ls+2*hb, 2*hb);\n            }\n            if (!onPath(maze, x+1, y)) {\n                paint(canvas, clr, x*ls+ls-hb, y*ls-hb, 2*hb, ls+2*hb);\n            }\n            if (!onPath(maze, x, y+1)) {\n                paint(canvas, clr, x*ls-hb, y*ls+ls-hb, ls+2*hb, 2*hb);\n            }\n            if (!onPath(maze, x-1, y)) {\n                paint(canvas, clr, x*ls-hb, y*ls-hb, 2*hb, ls+2*hb);\n            }\n\n            // Paint background, solve, and backtrack lines: top/right/bottom/left/middle.\n            if (onPath(maze, x, y-1)) {\n                clr = getConnectingColor(maze, colors, x, y-1, maze[y][x].color);\n                clr = fluctuateColor(clr, colors);\n                paint(canvas, clr, x*ls+hb+tm, y*ls, ls-2*hb-2*tm, hb+tm);\n            }\n            if (onPath(maze, x+1, y)) {\n                clr = getConnectingColor(maze, colors, x+1, y, maze[y][x].color);\n                clr = fluctuateColor(clr, colors);\n                paint(canvas, clr, x*ls+ls-hb-tm, y*ls+hb+tm, hb+tm, ls-2*hb-2*tm);\n            }\n            if (onPath(maze, x, y+1)) {\n                clr = getConnectingColor(maze, colors, x, y+1, maze[y][x].color);\n                clr = fluctuateColor(clr, colors);\n                paint(canvas, clr, x*ls+hb+tm, y*ls+ls-hb-tm, ls-2*hb-2*tm, hb+tm);\n            }\n            if (onPath(maze, x-1, y)) {\n                clr = getConnectingColor(maze, colors, x-1, y, maze[y][x].color);\n                clr = fluctuateColor(clr, colors);\n                paint(canvas, clr, x*ls, y*ls+hb+tm, hb+tm, ls-2*hb-2*tm);\n            }\n            clr = maze[y][x].color;\n            clr = fluctuateColor(clr, colors);\n            paint(canvas, clr, x*ls+hb+tm, y*ls+hb+tm, ls-2*hb-2*tm, ls-2*hb-2*tm);\n\n            // Paint text: top/right/bottom/left/middle.\n            if (state.currentlyShowingText && isCharacter(maze, x, y)) {\n\n                if (isCharacter(maze, x, y-1)) {\n                    clr = fluctuateColor(colors.text, colors);\n                    paint(canvas, clr, x*ls+hb+tm,    y*ls,          ls-2*hb-2*tm, hb+tm);\n                }\n                if (isCharacter(maze, x+1, y)) {\n                    clr = fluctuateColor(colors.text, colors);\n                    paint(canvas, clr, x*ls+ls-hb-tm, y*ls+hb+tm,    hb+tm,        ls-2*hb-2*tm);\n                }\n                if (isCharacter(maze, x, y+1)) {\n                    clr = fluctuateColor(colors.text, colors);\n                    paint(canvas, clr, x*ls+hb+tm,    y*ls+ls-hb-tm, ls-2*hb-2*tm, hb+tm);\n                }\n                if (isCharacter(maze, x-1, y)) {\n                    clr = fluctuateColor(colors.text, colors);\n                    paint(canvas, clr, x*ls,          y*ls+hb+tm,    hb+tm,        ls-2*hb-2*tm);\n                }\n                clr = fluctuateColor(colors.text, colors);\n                paint(canvas, clr, x*ls+hb+tm, y*ls+hb+tm, ls-2*hb-2*tm, ls-2*hb-2*tm);\n            }\n\n            // Paint start and end openings.\n            clr = state.colors.unvisited;\n            paint(canvas, clr, state.endpoints.start.x*ls-hb,  state.endpoints.start.y*ls-hb, 2*hb, ls+2*hb);\n            paint(canvas, clr, state.endpoints.end.x*ls+ls-hb, state.endpoints.end.y*ls-hb,   2*hb, ls+2*hb);\n        }\n    }\n};\n\n// Returns true if the given coordinates refer to an object that\n// has the 'path' property set.\nfunction onPath(maze, x, y) {\n    return y >= 0             &&\n           y < maze.length    &&\n           x >= 0             &&\n           x < maze[y].length &&\n           maze[y][x].path;\n}\n\n// Returns true if the coordinates are onPath() and refer to an\n// object that doesn't have its 'connection' property set.\nfunction isCharacter(maze, x, y) {\n    return onPath(maze, x, y) && !maze[y][x].connection;\n}\n\n// Returns the color to be used when painting the area of a location\n// nearest to an adjacent location.\nfunction getConnectingColor(maze, colors, x, y, defaultColor, fluctuate) {\n    if (maze[y][x].color === colors.backtracked) {\n        return colors.backtracked;\n    }\n    else if (maze[y][x].color === colors.unvisited) {\n        return colors.unvisited;\n    }\n    return defaultColor;\n}\n\nfunction fluctuateColor(color, colors) {\n\n    // Returns a random number, in a range centered on x. When doWrap is true,\n    // the range wraps around either end of the domain when it overflows the\n    // domain. Range and domain are assumed to start at 0.\n    // @param domain: An integer signifying the domain [0, domain].\n    // @param range:  An integer divisible by 2 and < than domain.\n    // @param x:      An integer in domain [0, domain].\n    function randomInRangeInDomain(x, range, domain, doWrap) {\n        var result, min, max, rangeIdx;\n\n        min = x - range / 2;\n        max = x + range / 2;\n\n        if (min < 0 || max > domain) {\n\n            // Wrap the domain and return the random number.\n            if (doWrap) {\n                min = min < 0      ? domain + min + 1 : min;\n                max = max > domain ? max - domain - 1 : max;\n\n                result = min;\n                rangeIdx = utils.randomInRange(0, range);\n\n                while (rangeIdx > 0) {\n                    result++;\n                    if (result > domain) {\n                        result = max;\n                    }\n                    rangeIdx--;\n                }\n\n                return result;\n            }\n\n            // Just correct the overflow.\n            min = min < 0      ? 0      : min;\n            max = max > domain ? domain : max;\n        }\n\n        result = utils.randomInRange(min, max);\n\n        return result;\n    }\n\n    var h, hRange = 40, hDomain = 360;\n    var s, sRange = 20, sDomain = 100;\n    var l, lRange = 20, lDomain = 100;\n\n    // Don't fluctuate color, sometimes.\n    if (!colors.fluctuate || color === colors.unvisited) {\n        return webColors.hsl(color);\n    }\n\n    h = randomInRangeInDomain(webColors.hue(color),        hRange, hDomain, true);\n    s = randomInRangeInDomain(webColors.saturation(color), sRange, sDomain, false);\n    l = randomInRangeInDomain(webColors.lightness(color),  lRange, lDomain, false);\n\n    // Keep away from too white.\n    l = l > 90 ? 90 : l;\n\n    return 'hsl(' + h + ', ' + s + '%, ' + l + '%)';\n}\n\n// Paint to the canvas.\nfunction paint(canvas, color, x, y, width, height) {\n    canvas.fillStyle = color;\n    canvas.fillRect(x, y, width, height);\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = {\n\n    // Return the css hsl value for color.\n    hsl: function(color) {\n        return getColor(color);\n    },\n\n    // Return the hue hsl value for color.\n    hue: function(color) {\n        color = getColor(color);\n\n        if (color) {\n            color = parseInt(color.match(/[0-9]+/g)[0]);\n        }\n        return color;\n    },\n\n    // Return the saturation hsl value for color.\n    saturation: function(color) {\n        color = getColor(color);\n\n        if (color) {\n            color = parseInt(color.match(/[0-9]+/g)[1]);\n        }\n        return color;\n    },\n\n    // Return the lightness hsl value for color.\n    lightness: function(color) {\n        color = getColor(color);\n\n        if (color) {\n            color = parseInt(color.match(/[0-9]+/g)[2]);\n        }\n        return color;\n    },\n\n    // Return a random web color name.\n    randomBrightWebColor: function() {\n        var brights = [\n            'aqua',\n            'blue',\n\t\t\t'blueviolet',\n\t\t\t'cornflowerblue',\n\t\t\t'crimson',\n\t\t\t'darkturquoise',\n\t\t\t'darkviolet',\n\t\t\t'deeppink',\n\t\t\t'deepskyblue',\n\t\t\t'dodgerblue',\n            'forestgreen',\n\t\t\t'fuchsia',\n\t\t\t'hotpink',\n\t\t\t'lightseagreen',\n\t\t\t'mediumorchid',\n\t\t\t'mediumslateblue',\n\t\t\t'mediumspringgreen',\n\t\t\t'mediumvioletred',\n\t\t\t'red',\n\t\t\t'royalblue',\n\t\t\t'violet'\n        ];\n        return brights[utils.randomInRange(0, brights.length - 1)];\n    }\n};\n\nfunction getColor(color) {\n    var colors = {\n        aliceblue: 'hsl(208, 100%, 97%)',\n        antiquewhite: 'hsl(34, 78%, 91%)',\n        aqua: 'hsl(180, 100%, 50%)',\n        aquamarine: 'hsl(160, 100%, 75%)',\n        azure: 'hsl(180, 100%, 97%)',\n        beige: 'hsl(60, 56%, 91%)',\n        bisque: 'hsl(33, 100%, 88%)',\n        black: 'hsl(0, 0%, 0%)',\n        blanchedalmond: 'hsl(36, 100%, 90%)',\n        blue: 'hsl(240, 100%, 50%)',\n        blueviolet: 'hsl(271, 76%, 53%)',\n        brown: 'hsl(0, 59%, 41%)',\n        burlywood: 'hsl(34, 57%, 70%)',\n        cadetblue: 'hsl(182, 25%, 50%)',\n        chartreuse: 'hsl(90, 100%, 50%)',\n        chocolate: 'hsl(25, 75%, 47%)',\n        coral: 'hsl(16, 100%, 66%)',\n        cornflowerblue: 'hsl(219, 79%, 66%)',\n        cornsilk: 'hsl(48, 100%, 93%)',\n        crimson: 'hsl(348, 83%, 58%)',\n        cyan: 'hsl(180, 100%, 50%)',\n        darkblue: 'hsl(240, 100%, 27%)',\n        darkcyan: 'hsl(180, 100%, 27%)',\n        darkgoldenrod: 'hsl(43, 89%, 38%)',\n        darkgray: 'hsl(0, 0%, 66%)',\n        darkgrey: 'hsl(0, 0%, 66%)',\n        darkgreen: 'hsl(120, 100%, 20%)',\n        darkkhaki: 'hsl(56, 38%, 58%)',\n        darkmagenta: 'hsl(300, 100%, 27%)',\n        darkolivegreen: 'hsl(82, 39%, 30%)',\n        darkorange: 'hsl(33, 100%, 50%)',\n        darkorchid: 'hsl(280, 61%, 50%)',\n        darkred: 'hsl(0, 100%, 27%)',\n        darksalmon: 'hsl(15, 72%, 70%)',\n        darkseagreen: 'hsl(120, 25%, 65%)',\n        darkslateblue: 'hsl(248, 39%, 39%)',\n        darkslategray: 'hsl(180, 25%, 25%)',\n        darkslategrey: 'hsl(180, 25%, 25%)',\n        darkturquoise: 'hsl(181, 100%, 41%)',\n        darkviolet: 'hsl(282, 100%, 41%)',\n        deeppink: 'hsl(328, 100%, 54%)',\n        deepskyblue: 'hsl(195, 100%, 50%)',\n        dimgray: 'hsl(0, 0%, 41%)',\n        dimgrey: 'hsl(0, 0%, 41%)',\n        dodgerblue: 'hsl(210, 100%, 56%)',\n        firebrick: 'hsl(0, 68%, 42%)',\n        floralwhite: 'hsl(40, 100%, 97%)',\n        forestgreen: 'hsl(120, 61%, 34%)',\n        fuchsia: 'hsl(300, 100%, 50%)',\n        gainsboro: 'hsl(0, 0%, 86%)',\n        ghostwhite: 'hsl(240, 100%, 99%)',\n        gold: 'hsl(51, 100%, 50%)',\n        goldenrod: 'hsl(43, 74%, 49%)',\n        gray: 'hsl(0, 0%, 50%)',\n        green: 'hsl(120, 100%, 25%)',\n        greenyellow: 'hsl(84, 100%, 59%)',\n        grey: 'hsl(0, 0%, 50%)',\n        honeydew: 'hsl(120, 100%, 97%)',\n        hotpink: 'hsl(330, 100%, 71%)',\n        indianred: 'hsl(0, 53%, 58%)',\n        indigo: 'hsl(275, 100%, 25%)',\n        ivory: 'hsl(60, 100%, 97%)',\n        khaki: 'hsl(54, 77%, 75%)',\n        lavender: 'hsl(240, 67%, 94%)',\n        lavenderblush: 'hsl(340, 100%, 97%)',\n        lawngreen: 'hsl(90, 100%, 49%)',\n        lemonchiffon: 'hsl(54, 100%, 90%)',\n        lightblue: 'hsl(195, 53%, 79%)',\n        lightcoral: 'hsl(0, 79%, 72%)',\n        lightcyan: 'hsl(180, 100%, 94%)',\n        lightgoldenrodyellow: 'hsl(60, 80%, 90%)',\n        lightgray: 'hsl(0, 0%, 83%)',\n        lightgrey: 'hsl(0, 0%, 83%)',\n        lightgreen: 'hsl(120, 73%, 75%)',\n        lightpink: 'hsl(351, 100%, 86%)',\n        lightsalmon: 'hsl(17, 100%, 74%)',\n        lightseagreen: 'hsl(177, 70%, 41%)',\n        lightskyblue: 'hsl(203, 92%, 75%)',\n        lightslategray: 'hsl(210, 14%, 53%)',\n        lightslategrey: 'hsl(210, 14%, 53%)',\n        lightsteelblue: 'hsl(214, 41%, 78%)',\n        lightyellow: 'hsl(60, 100%, 94%)',\n        lime: 'hsl(120, 100%, 50%)',\n        limegreen: 'hsl(120, 61%, 50%)',\n        linen: 'hsl(30, 67%, 94%)',\n        maroon: 'hsl(0, 100%, 25%)',\n        mediumaquamarine: 'hsl(160, 51%, 60%)',\n        mediumblue: 'hsl(240, 100%, 40%)',\n        mediumorchid: 'hsl(288, 59%, 58%)',\n        mediumpurple: 'hsl(260, 60%, 65%)',\n        mediumseagreen: 'hsl(147, 50%, 47%)',\n        mediumslateblue: 'hsl(249, 80%, 67%)',\n        mediumspringgreen: 'hsl(157, 100%, 49%)',\n        mediumturquoise: 'hsl(178, 60%, 55%)',\n        mediumvioletred: 'hsl(322, 81%, 43%)',\n        midnightblue: 'hsl(240, 64%, 27%)',\n        mintcream: 'hsl(150, 100%, 98%)',\n        mistyrose: 'hsl(6, 100%, 94%)',\n        moccasin: 'hsl(38, 100%, 85%)',\n        navajowhite: 'hsl(36, 100%, 84%)',\n        navy: 'hsl(240, 100%, 25%)',\n        oldlace: 'hsl(39, 85%, 95%)',\n        olive: 'hsl(60, 100%, 25%)',\n        olivedrab: 'hsl(80, 60%, 35%)',\n        orange: 'hsl(39, 100%, 50%)',\n        orangered: 'hsl(16, 100%, 50%)',\n        orchid: 'hsl(302, 59%, 65%)',\n        palegoldenrod: 'hsl(55, 67%, 80%)',\n        palegreen: 'hsl(120, 93%, 79%)',\n        paleturquoise: 'hsl(180, 65%, 81%)',\n        palevioletred: 'hsl(340, 60%, 65%)',\n        papayawhip: 'hsl(37, 100%, 92%)',\n        peachpuff: 'hsl(28, 100%, 86%)',\n        peru: 'hsl(30, 59%, 53%)',\n        pink: 'hsl(350, 100%, 88%)',\n        plum: 'hsl(300, 47%, 75%)',\n        powderblue: 'hsl(187, 52%, 80%)',\n        purple: 'hsl(300, 100%, 25%)',\n        red: 'hsl(0, 100%, 50%)',\n        rosybrown: 'hsl(0, 25%, 65%)',\n        royalblue: 'hsl(225, 73%, 57%)',\n        saddlebrown: 'hsl(25, 76%, 31%)',\n        salmon: 'hsl(6, 93%, 71%)',\n        sandybrown: 'hsl(28, 87%, 67%)',\n        seagreen: 'hsl(146, 50%, 36%)',\n        seashell: 'hsl(25, 100%, 97%)',\n        sienna: 'hsl(19, 56%, 40%)',\n        silver: 'hsl(0, 0%, 75%)',\n        skyblue: 'hsl(197, 71%, 73%)',\n        slateblue: 'hsl(248, 53%, 58%)',\n        slategray: 'hsl(210, 13%, 50%)',\n        slategrey: 'hsl(210, 13%, 50%)',\n        snow: 'hsl(0, 100%, 99%)',\n        springgreen: 'hsl(150, 100%, 50%)',\n        steelblue: 'hsl(207, 44%, 49%)',\n        tan: 'hsl(34, 44%, 69%)',\n        teal: 'hsl(180, 100%, 25%)',\n        thistle: 'hsl(300, 24%, 80%)',\n        tomato: 'hsl(9, 100%, 64%)',\n        turquoise: 'hsl(174, 72%, 56%)',\n        violet: 'hsl(300, 76%, 72%)',\n        wheat: 'hsl(39, 77%, 83%)',\n        white: 'hsl(0, 100%, 100%)',\n        whitesmoke: 'hsl(0, 0%, 96%)',\n        yellow: 'hsl(60, 100%, 50%)',\n        yellowgreen: 'hsl(80, 61%, 50%)'\n    };\n\n    if(color in colors) {\n        return colors[color];\n    }\n    return null;\n}\n","// Polyfill some newer features.\n(function () {\n\n    // Number.isInteger\n    // https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch2.md\n    if (!Number.isInteger) {\n        Number.isInteger = function(num) {\n            return typeof num === 'number' && num % 1 === 0;\n        };\n    }\n\n    // Array.indexOf\n    // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function(searchElement, fromIndex) {\n            var k;\n            if (this === null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n            var o = Object(this);\n            var len = o.length >>> 0;\n            if (len === 0) {\n                return -1;\n            }\n            var n = fromIndex | 0;\n            if (n >= len) {\n                return -1;\n            }\n            k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n            while (k < len) {\n                if (k in o && o[k] === searchElement) {\n                    return k;\n                }\n                k++;\n            }\n            return -1;\n        };\n    }\n})();\n","'use strict';\n\nvar utils        = require('./utils');\nvar controlsView = require('./controls/view');\nvar paint        = require('./paint/index');\n\n// Solve the maze automagically, or just show the solution.\nmodule.exports = {\n\n    run: function(maze, canvas, state, doReset) {\n        var s = state.solve;\n\n        if (doReset) {\n            reset(maze, canvas, state);\n\n            state.solve.showingSolution = false;\n            controlsView.updateShowingSolutionCtrl(state);\n\n            return;\n        }\n\n        // Currently running so stop and return.\n        else if (s.running) {\n            stop(maze, state);\n            return;\n        }\n\n        // Prepare to start solving if the current location isn't set or is at\n        // maze's end, or if the most recent action was to show the solution.\n        else if (!s.curr.x || atEnd(maze, s.curr.x, s.curr.y) || state.solve.showingSolution) {\n            reset(maze, canvas, state);\n\n            state.solve.showingSolution = false;\n            controlsView.updateShowingSolutionCtrl(state);\n\n            maze[s.curr.y][s.curr.x].visited = true;\n            paintRoute(maze, canvas, state, s.curr.x, s.curr.y);\n        }\n\n        s.running = true;\n\n        controlsView.disableCtrl('maze-solve-start-ctrl');\n        controlsView.enableCtrl('maze-solve-pause-ctrl');\n        controlsView.enableCtrl('maze-solve-reset-ctrl');\n        controlsView.colorSpeedMeter(state);\n\n        s.interval = setInterval(function() {\n            if (atEnd(maze, s.curr.x, s.curr.y)) {\n                stop(maze, state);\n            }\n            else {\n                exploreNextLocation(maze, canvas, state, true);\n            }\n        }.bind(this), s.delay);\n    },\n\n    // Just show the solution without animation.\n    show: function(maze, canvas, state) {\n        var s = state.solve;\n\n        state.solve.showingSolution = !state.solve.showingSolution;\n\n        reset(maze, canvas, state);\n\n        if (state.solve.showingSolution) {\n            while (!atEnd(maze, s.curr.x, s.curr.y)) {\n                exploreNextLocation(maze, canvas, state, false);\n            }\n            controlsView.updateShowingSolutionCtrl(state);\n        }\n        else {\n            controlsView.updateShowingSolutionCtrl(state);\n        }\n    }\n};\n\n// Stop or pause solving, depending on the current location.\nfunction stop(maze, state) {\n    var s = state.solve;\n\n    clearInterval(s.interval);\n    s.interval = null;\n\n    s.running = false;\n\n    if (atEnd(maze, s.curr.x, s.curr.y)) {\n        controlsView.enableCtrl('maze-solve-start-ctrl');\n        controlsView.disableCtrl('maze-solve-pause-ctrl');\n        controlsView.disableCtrl('maze-solve-reset-ctrl');\n    }\n    else {\n        controlsView.enableCtrl('maze-solve-start-ctrl');\n        controlsView.disableCtrl('maze-solve-pause-ctrl');\n    }\n}\n\n// Reset the solve state.\nfunction reset(maze, canvas, state) {\n    var x, y;\n\n    var s  = state.solve;\n    var ep = state.endpoints;\n\n    // Sometimes reset is used in the running state, so clear the interval\n    // that may or may not be there.\n    clearInterval(s.interval);\n    s.interval = null;\n\n    s.running = false;\n    s.stack.length = 0;\n    s.prev = null;\n    s.curr = {\n        'x': ep.start.x,\n        'y': ep.start.y\n    };\n\n    controlsView.enableCtrl('maze-solve-start-ctrl');\n    controlsView.disableCtrl('maze-solve-pause-ctrl');\n    controlsView.disableCtrl('maze-solve-reset-ctrl');\n\n    for (y = 0; y < maze.length; y++) {\n        for (x = 0; x < maze[y].length; x++) {\n\n            maze[y][x].visited  = false;\n            maze[y][x].solution = false;\n            maze[y][x].color    = state.colors.unvisited;\n        }\n    }\n\n    paint.all(maze, canvas, state);\n}\n\n// Returns true if the coordinates give the maze's end.\nfunction atEnd(maze, x, y) {\n    return 'end' in maze[y][x] && maze[y][x].end;\n}\n\n// Move to the next unvisited location, or backtrack, until the\n// final location is found.\nfunction exploreNextLocation(maze, canvas, state, colorBacktracking) {\n    var s = state.solve;\n    var next = getNextLocation(maze, s.curr.x, s.curr.y);\n\n    // An unvisited location was found.\n    if (next) {\n        s.stack.push(s.curr);\n        s.prev = s.curr;\n        s.curr = next;\n        maze[s.curr.y][s.curr.x].visited = true;\n    }\n\n    // Need to backtrack.\n    else {\n        s.prev = s.curr;\n        s.curr = s.stack.pop();\n    }\n\n    paintRoute(maze, canvas, state, colorBacktracking);\n}\n\n// Look for an unvisited path in all four directions. Return the\n// coordinates of the first one found, or null if all visited.\nfunction getNextLocation(maze, x, y) {\n    var i, loc;\n\n    var nextLocOpts = [\n        { 'x': x-1, 'y': y   },\n        { 'x': x,   'y': y+1 },\n        { 'x': x+1, 'y': y   },\n        { 'x': x,   'y': y-1 }\n    ];\n\n    // // Solve the maze randomly.\n    // utils.shuffleArrayInPlace(nextLocOpts);\n\n    for (i = 0; i < nextLocOpts.length; i++) {\n        loc = nextLocOpts[i];\n\n        if (typeof maze[loc.y] !== 'undefined' && typeof maze[loc.y][loc.x] !== 'undefined') {\n            if (maze[loc.y][loc.x].path && !maze[loc.y][loc.x].visited) {\n                return loc;\n            }\n        }\n    }\n\n    return null;\n}\n\n// Paint the current and previous location.\nfunction paintRoute(maze, canvas, state, colorBacktracking) {\n    var s = state.solve;\n\n    if (s.prev) {\n\n        // Currently backtracking so color the previous location to\n        // indicate that it's not on the solution path.\n        if (maze[s.curr.y][s.curr.x].solution) {\n\n            maze[s.prev.y][s.prev.x].solution = false;\n            if (colorBacktracking) {\n                maze[s.prev.y][s.prev.x].color = state.colors.backtracked;\n            }\n            else {\n                maze[s.prev.y][s.prev.x].color = state.colors.unvisited;\n            }\n        }\n\n        // Not currently backtracking so color the previous location\n        // to indicate that it's assumed to be on the solution path.\n        else {\n\n            maze[s.prev.y][s.prev.x].solution = true;\n            maze[s.prev.y][s.prev.x].color = state.colors.solution;\n        }\n    }\n\n    maze[s.curr.y][s.curr.x].color = state.colors.solution;\n\n    if (s.prev) {\n        paint.one(maze, canvas, state, s.prev.x, s.prev.y);\n    }\n    paint.one(maze, canvas, state, s.curr.x, s.curr.y);\n}\n","'use strict';\n\nmodule.exports = {\n\n    // The smallest size the maze is renderable is three pixels: a path\n    // between two lines.\n    minLocationSize: 3,\n\n    // TODO A better vertical character connection algorithm so this hack isn't necessary.\n    maxLocationSize: function(state) {\n        return state.autoFittedLocationSize + 10;\n    },\n\n    // Shuffles the contents of an array in place.\n    shuffleArrayInPlace: function(arr) {\n        var i, rnd, tmp;\n\n        for (i = arr.length; i; i--) {\n\n            rnd = Math.floor(Math.random() * i);\n\n            tmp = arr[i-1];\n            arr[i-1] = arr[rnd];\n            arr[rnd] = tmp;\n        }\n\n        return;\n    },\n\n    // Returns a number in range [min, max].\n    randomInRange: function(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n};\n","'use strict';\n\n// For miscellaneous view modifications.\nmodule.exports = {\n\n    setMazeTopMargin: function(mazeMargin) {\n        var windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n        var mazeMenu     = document.getElementById('maze-menu');\n\n        document.getElementById('text-maze').style.marginTop = ((windowHeight - mazeMenu.scrollHeight) * mazeMargin / 2) + 'px';\n    }\n};\n"],"sourceRoot":"/source/"}