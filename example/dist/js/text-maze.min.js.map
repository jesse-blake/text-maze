{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/js/index.js","../lib/build/Character.js","../lib/build/CharacterMaps.js","../lib/build/break-text-into-lines.js","../lib/build/connect-characters/CharacterSide.js","../lib/build/connect-characters/connect-spaces.js","../lib/build/connect-characters/find-adjacent-character.js","../lib/build/connect-characters/horizontally.js","../lib/build/connect-characters/index.js","../lib/build/connect-characters/vertically.js","../lib/build/embed-text.js","../lib/build/fill-out.js","../lib/build/flatten.js","../lib/build/index.js","../lib/build/pad-lines.js","../lib/build/set-endpoints.js","../lib/controls/index.js","../lib/controls/view.js","../lib/index.js","../lib/load/auto-size.js","../lib/load/index.js","../lib/paint/index.js","../lib/paint/web-colors.js","../lib/polyfill.js","../lib/solve.js","../lib/utils.js","../lib/view.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","init","useSpeedMeter","fluctuateSolutionColor","CharMaps","initBlank","this","ch","topLeftX","topLeftY","connected","spaceCharConnectionArray","arguments","flattenCharacter","x","y","colors","flattened","visited","solution","color","unvisited","path","connection","getBitAtLocationInChar","cleanText","text","replace","getCharHeight","_A","map","getLengthOfCharInMaze","_getChar","getRowOfChar","idx","slice","getConnectionOptsForSideOfChar","side","bitmap","charMap","push","_Space","_Period","_Question","_Exclamation","_Apostrophe","_TwoSpacePad","_Hyphen","toUpperCase","_B","_C","_D","_E","_F","_G","_H","_I","_J","_K","_L","_M","_N","_O","_P","_Q","_R","_S","_T","_U","_V","_W","_X","_Y","_Z","_0","_1","_2","_3","_4","_5","_6","_7","_8","_9","getWordLength","word","wordChars","split","hyphenateWord","lines","state","maxLineLen","nextLen","wordLen","chars","front","back","currLineIdx","lineLen","maxMazeWidth","locationSize","words","ofChar","whichSide","getNameOfOppositeSide","top","right","bottom","left","utils","maze","charlist","j","loIdx","hiIdx","connect","connections","stop","charHgt","randomInRange","unshift","Math","random","getXCoordsOfChar","xCoords","charLen","isValidCharacterLoc","getXCoordForRandomAdjacentChar","character","shuffleArrayInPlace","findSpecialCase","leftChar","rightChar","cases","BT","B7","B?","B'","C-","DI","DT","DZ","D7","D.","D?","FJ","F1","F.","I-","K-","LT","LV","L4","L7","L9","L?","L-","L'","L*","PJ","P.","QT","QV","Q4","Q7","Q9","Q?","Q-","Q'","Q*","RT","R4","R7","R9","R?","R-","R'","R*","TJ","T1","T.","T-","V.","X-","Z-","1T","1V","14","17","19","1?","1-","1'","1*","51","5.","5-",".T",".V",".4",".7",".9",".?",".-",".'",".*","?J","?.","-I","-J","-T","-X","-Z","-1","-7","-.","-?","-'","'J","'.","'-","*T","*7","*?","*'","result","specialCase","ch1Side","ch2","specialCaseConnection","ch1","ch1Opts","ch2Opts","findAdjacentChar","connectHorizontally","connectVertically","CharacterSide","connectSpaces","addSidesOfCharToSidelist","sidelist","sides","Object","create","adjChar","startCharIdx","pop","ch1Len","ch2Len","ch1Start","abs","ch2Start","overlap","ch1End","ch2End","ch1Idx","ch2Idx","Character","k","blank","lenAbove","lenBelow","numCharBlanksToAdd","charAt","checkAround","adjacent","addPath","locations","endpoints","start","end","verifyConnections","getMaxMazeWidth","mazeMargin","windowWidth","window","innerWidth","document","documentElement","clientWidth","body","max","getElementById","removeAttribute","autoSize","breakTextIntoLines","padLines","embedText","connectCharacters","setEndpoints","flatten","fillOut","solve","setSolution","opts","colorText","canvas","currentlyShowingText","view","toggleShowingText","paint","all","colorSolution","currentlyShowingSolution","toggleShowingSolution","adjustSpeed","ctrls","speed","prevSpeed","continueRunning","running","pause","animationDelays","updateSpeedCtrls","updateSpeedMeter","endOfMazeCtrlsUpdate","enableCtrlById","disableCtrlById","rebuild","reset","build","load","stopDefault","evt","preventDefault","returnValue","addListener","type","elem","func","addEventListener","attachEvent","webColors","mainView","id","c","maze-rebuild-ctrl","action","maze-show-text-ctrl","updateShowingTextCtrl","stopPropagation","maze-show-text-label","maze-hide-text-label","maze-color-text-random","randomBrightWebColor","maze-color-text-default","textDefault","hideControlById","maze-color-text-black","maze-fluctuate-text-color","updateFluctuateTextColorCtrl","fluctuateTextColor","maze-fluctuate-text-color-checked","maze-fluctuate-text-color-unchecked","maze-show-solution-ctrl","updateShowingSolutionCtrl","maze-show-solution-label","maze-hide-solution-label","maze-color-solution-random","maze-color-solution-default","solutionDefault","maze-color-solution-black","maze-fluctuate-solution-color","updateFluctuateSolutionColorCtrl","maze-fluctuate-solution-color-checked","maze-fluctuate-solution-color-unchecked","maze-solve-start-ctrl","maze-solve-pause-ctrl","maze-solve-reset-ctrl","maze-decrease-speed-ctrl","maze-increase-speed-ctrl","injectSpeedMeter","maze-decrease-size-ctrl","size","minLocationSize","maxLocationSize","setLocationSize","updateSizeCtrls","maze-increase-size-ctrl","maze-auto-size-ctrl","autoFittedLocationSize","autoSetLocationSize","maze-text-input-ctrl","input","oninput","value","originalText","clearTimeout","textChangeRebuildTimeout","setTimeout","onpropertychange","keyCode","maze-reset-ctrl","clearTextInput","hasOwnProperty","bind","screenChangeRebuildTimeout","setMazeTopMargin","configureBootstrapDropdowns","style","display","ctrl","setAttribute","className","match","click","newNode","childNode","createElement","innerHTML","parentNode","insertBefore","backgroundColor","dropdowns","getElementsByClassName","controls","getMaxMazeHeight","windowHeight","innerHeight","clientHeight","mazeMenu","computeMazeHeight","getMaxMazeWidthCallback","maxMazeHeight","getDefaults","backtracked","randomizeTextColor","randomizeSolutionColor","prev","curr","stack","interval","delay","indexOf","spd","loadOptions","hsl","loadCanvas","longest","getContext","width","height","seal","onPath","isCharacter","isKey","key","getConnectingColor","defaultColor","fluctuate","fluctuateColor","randomInRangeInDomain","range","domain","doWrap","min","rangeIdx","h","hue","saturation","lightness","fillStyle","fillRect","one","clr","ls","tm","floor","getColor","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","parseInt","brights","Number","isInteger","num","Array","prototype","searchElement","fromIndex","TypeError","len","ep","clearInterval","atEnd","exploreNextLocation","next","getNextLocation","paintRoute","loc","nextLocOpts","endOfMazeCtrlsUpdateCallback","setInterval","arr","rnd","tmp","marginTop","scrollHeight"],"mappings":"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","file":"text-maze.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","var textMaze = require('text-maze');\n\ntextMaze.init({\n    useSpeedMeter: true,\n    fluctuateSolutionColor: true\n});\n","'use strict';\n\nvar CharMaps = require('./CharacterMaps');\n\n// The locations in the maze that together compose a single embedded\n// character are represented by a single Character instance. Each location\n// in the maze that isn't part of an embedded character is represented\n// by its own Character instance created with the initBlank function.\nmodule.exports = {\n\n    // Init a blank/non character.\n    initBlank: function() {\n        this.ch                       = null;\n        this.topLeftX                 = null;\n        this.topLeftY                 = null;\n        this.connected                = false;\n        this.spaceCharConnectionArray = null;\n    },\n\n    // Init a normal character.\n    init: function(ch, topLeftX, topLeftY) {\n\n        if (arguments.length != 3) {\n            throw new Error('Invalid number of arguments to Character init function');\n        }\n\n        // An ascii character.\n        this.ch = ch;\n\n        // Coordinates of the top left location in the maze for this Character.\n        this.topLeftX = topLeftX;\n        this.topLeftY = topLeftY;\n\n        // Set to 'yes' when this Character becomes connected as a path in the maze.\n        this.connected = false;\n\n        // Indicates which location in a space Character are connected as a path in the maze.\n        this.spaceCharConnectionArray = null;\n    },\n\n    // Used to flatten/simplify a location in the maze for easier rendering and use.\n    flattenCharacter: function(x, y, colors) {\n\n        var flattened = {\n            // A maze location visited while searching for the solution.\n            visited: false,\n            // A maze location on the maze's solution path.\n            solution: false,\n            // The location's current color.\n            color: colors.unvisited\n        };\n\n        // Convert the maze indices to indices into the character's map.\n        x = x - this.topLeftX;\n        y = y - this.topLeftY;\n\n        // Adds the properties 'path' and 'connection' to flattened.\n        // Note: connection is meaningless unless path == 1.\n        // If path == 0:                    location is not a path in the maze.\n        // If path == 1:                    location is     a path in the maze.\n        // If path == 1 && connection == 0: location is     a character.\n        // If path == 1 && connection == 1: location is not a character.\n        switch (true) {\n\n            // Blank/non character:\n            case this.ch === null:\n                flattened.path = this.connected ? true : false;\n                flattened.connection = this.connected ? true : false;\n                break;\n\n            // Space character: use its special connection array.\n            case this.ch === ' ':\n                flattened.path = this.spaceCharConnectionArray[y] ? true : false;\n                flattened.connection = this.spaceCharConnectionArray[y] ? true : false;\n                break;\n\n            // Exclamation point blank spot: make it a connection.\n            case this.ch === '!' && x === 0 && y === 3:\n                flattened.path = true;\n                flattened.connection = true;\n                break;\n\n            // Question mark blank spot: mike it a conneciton.\n            case this.ch === '?' && x === 1 && y === 3:\n                flattened.path = true;\n                flattened.connection = true;\n                break;\n\n            // Special two-space pad character.\n            case this.ch === '*':\n                flattened.path = CharMaps.getBitAtLocationInChar(this.ch, x, y) ? true : false;\n                flattened.connection = flattened.path ? true : false;\n                break;\n\n            // Any other character.\n            default:\n                flattened.path = CharMaps.getBitAtLocationInChar(this.ch, x, y) ? true : false;\n                flattened.connection = false;\n        }\n\n        return flattened;\n    }\n};\n","'use strict';\n\nmodule.exports = {\n\n    // Clean the text that is to be rendered in the maze\n    cleanText: function(text) {\n        return text\n            .replace(/[^A-Za-z0-9 .?!']/g, '') // Remove blacklisted characters\n            .replace(/\\s+/g, ' ')              // Reduce contiguous whitespace to a single space\n            .replace(/(^\\s+|\\s+$)/g, '');      // Trim whitespace\n    },\n\n    // Return the height of a character's bitmap, which is the height (in\n    // maze locations) the character will require in the maze\n    getCharHeight: function() {\n        return this._A.map.length;\n    },\n\n    // Return the length of a row in a character's bitmap, which is the length\n    // (in maze locations) the character will require in the maze\n    getLengthOfCharInMaze: function(ch) {\n        return this._getChar(ch)[0].length;\n    },\n\n    // Return a copy of a row of a character's bitmap\n    getRowOfChar: function(ch, idx) {\n        return this._getChar(ch)[idx].slice();\n    },\n\n    // Returns the bit in a character at the given coordinates\n    getBitAtLocationInChar: function(ch, x, y) {\n        return this._getChar(ch)[y][x];\n    },\n\n    // Return a bitmap array that indicates where the maze can be connected to\n    // a character on a particular side of that character\n    //\n    // @param ch: The character in ascii\n    // @param side: One of: top right bottom left\n    getConnectionOptsForSideOfChar: function(ch, side) {\n        var i, bitmap, charMap = this._getChar(ch);\n\n        // Let any character connect to a space character at any location in the space\n        if (ch === ' ') {\n            return [1,1,1,1,1];\n        }\n\n        switch (side) {\n\n            // Return the top row in the character's bitmap\n            case 'top':\n                return charMap[0].slice();\n\n            // Return an array with the values at the end of each row in the character\n            case 'right':\n                bitmap = [];\n                for (i = 0; i < this.getCharHeight(); i++) {\n                    bitmap.push(charMap[i][charMap[i].length - 1]);\n                }\n                return bitmap;\n\n            // Return the bottom row in the character bitmap\n            case 'bottom':\n                return charMap[this.getCharHeight() - 1].slice();\n\n            // Return an array with the values at the end of each row in the character\n            case 'left':\n                bitmap = [];\n                for (i = 0; i < this.getCharHeight(); i++) {\n                    bitmap.push(charMap[i][0]);\n                }\n                return bitmap;\n            default:\n                throw new Error(\"Param 'side' requires one of: top right bottom left\");\n        }\n    },\n\n    // Internal function to get a character's bitmap\n    _getChar: function(ch) {\n        switch (ch) {\n            case ' ':\n                return this._Space.map;\n            case '.':\n                return this._Period.map;\n            case '?':\n                return this._Question.map;\n            case '!':\n                return this._Exclamation.map;\n            case \"'\":\n                return this._Apostrophe.map;\n            case \"*\":\n                return this._TwoSpacePad.map;\n            case '-':\n                return this._Hyphen.map;\n        }\n\n        return this['_' + ch.toUpperCase()].map;\n    },\n\n    _A: {\n        map: [\n          [1,1,1],\n          [1,0,1],\n          [1,1,1],\n          [1,0,1],\n          [1,0,1]\n        ],\n    },\n    _B: {\n        map: [\n          [1,1,1,0],\n          [1,0,1,0],\n          [1,1,1,1],\n          [1,0,0,1],\n          [1,1,1,1]\n        ],\n    },\n    _C: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,0,0],\n          [1,0,0],\n          [1,1,1]\n        ],\n    },\n    _D: {\n        map: [\n          [1,1,1,0],\n          [1,0,1,1],\n          [1,0,0,1],\n          [1,0,1,1],\n          [1,1,1,0]\n        ],\n    },\n    _E: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,1,1],\n          [1,0,0],\n          [1,1,1]\n        ],\n    },\n    _F: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,1,1],\n          [1,0,0],\n          [1,0,0]\n        ],\n    },\n    _G: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,0,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _H: {\n        map: [\n          [1,0,1],\n          [1,0,1],\n          [1,1,1],\n          [1,0,1],\n          [1,0,1]\n        ],\n    },\n    _I: {\n        map: [\n          [1,1,1],\n          [0,1,0],\n          [0,1,0],\n          [0,1,0],\n          [1,1,1]\n        ],\n    },\n    _J: {\n        map: [\n          [0,0,1],\n          [0,0,1],\n          [0,0,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _K: {\n        map: [\n          [1,0,0,1],\n          [1,0,1,1],\n          [1,1,1,0],\n          [1,0,1,1],\n          [1,0,0,1]\n        ],\n    },\n    _L: {\n        map: [\n          [1,0,0],\n          [1,0,0],\n          [1,0,0],\n          [1,0,0],\n          [1,1,1]\n        ],\n    },\n    _M: {\n        map: [\n          [1,1,1,1,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1]\n        ],\n    },\n    _N: {\n        map: [\n          [1,1,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,1,1]\n        ],\n    },\n    _O: {\n        map: [\n          [1,1,1],\n          [1,0,1],\n          [1,0,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _P: {\n        map: [\n          [1,1,1],\n          [1,0,1],\n          [1,1,1],\n          [1,0,0],\n          [1,0,0]\n        ],\n    },\n    _Q: {\n        map: [\n          [1,1,1,0],\n          [1,0,1,0],\n          [1,0,1,0],\n          [1,0,1,0],\n          [1,1,1,1]\n        ],\n    },\n    _R: {\n        map: [\n          [1,1,1,0],\n          [1,0,1,0],\n          [1,1,1,0],\n          [1,0,1,1],\n          [1,0,0,1]\n        ],\n    },\n    _S: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,1,1],\n          [0,0,1],\n          [1,1,1]\n        ],\n    },\n    _T: {\n        map: [\n          [1,1,1],\n          [0,1,0],\n          [0,1,0],\n          [0,1,0],\n          [0,1,0]\n        ],\n    },\n    _U: {\n        map: [\n          [1,0,1],\n          [1,0,1],\n          [1,0,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _V: {\n        map: [\n          [1,0,1],\n          [1,0,1],\n          [1,0,1],\n          [1,1,1],\n          [0,1,0]\n        ],\n    },\n    _W: {\n        map: [\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,0,1,0,1],\n          [1,1,1,1,1]\n        ],\n    },\n    _X: {\n        map: [\n          [1,0,1],\n          [1,1,1],\n          [0,1,0],\n          [1,1,1],\n          [1,0,1]\n        ],\n    },\n    _Y: {\n        map: [\n          [1,0,1],\n          [1,0,1],\n          [1,1,1],\n          [0,0,1],\n          [1,1,1]\n        ],\n    },\n    _Z: {\n        map: [\n          [1,1,1,1],\n          [0,0,1,0],\n          [0,1,1,0],\n          [0,1,0,0],\n          [1,1,1,1]\n        ],\n    },\n    _0: {\n        map: [\n          [1,1,1],\n          [1,0,1],\n          [1,0,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _1: {\n        map: [\n          [0,1,0],\n          [1,1,0],\n          [0,1,0],\n          [0,1,0],\n          [1,1,1]\n        ],\n    },\n    _2: {\n        map: [\n          [1,1,1],\n          [0,0,1],\n          [1,1,1],\n          [1,0,0],\n          [1,1,1]\n        ],\n    },\n    _3: {\n        map: [\n          [1,1,1],\n          [0,0,1],\n          [1,1,1],\n          [0,0,1],\n          [1,1,1]\n        ],\n    },\n    _4: {\n        map: [\n          [1,0,1],\n          [1,0,1],\n          [1,1,1],\n          [0,0,1],\n          [0,0,1]\n        ],\n    },\n    _5: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,1,0],\n          [0,1,1],\n          [1,1,0]\n        ],\n    },\n    _6: {\n        map: [\n          [1,1,1],\n          [1,0,0],\n          [1,1,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _7: {\n        map: [\n          [1,1,1],\n          [0,0,1],\n          [0,0,1],\n          [0,0,1],\n          [0,0,1]\n        ],\n    },\n    _8: {\n        map: [\n          [1,1,1],\n          [1,0,1],\n          [1,1,1],\n          [1,0,1],\n          [1,1,1]\n        ],\n    },\n    _9: {\n        map: [\n          [1,1,1],\n          [1,0,1],\n          [1,1,1],\n          [0,0,1],\n          [0,0,1]\n        ],\n    },\n    _Space: {\n        map: [\n          [0],\n          [0],\n          [0],\n          [0],\n          [0]\n        ],\n    },\n    _Period: {\n        map: [\n          [0],\n          [0],\n          [0],\n          [0],\n          [1]\n        ],\n    },\n    _Question: {\n        map: [\n          [1,1,1],\n          [0,0,1],\n          [0,1,1],\n          [0,0,0],\n          [0,1,0]\n        ],\n    },\n    _Exclamation: {\n        map: [\n          [1],\n          [1],\n          [1],\n          [0],\n          [1]\n        ],\n    },\n    _Apostrophe: {\n        map: [\n          [1],\n          [1],\n          [0],\n          [0],\n          [0]\n        ],\n    },\n    _Hyphen: {\n        map: [\n          [0,0],\n          [0,0],\n          [1,1],\n          [0,0],\n          [0,0]\n        ]\n    },\n    _TwoSpacePad: {\n        map: [\n          [1,0],\n          [1,0],\n          [1,1],\n          [0,1],\n          [0,1]\n        ]\n    }\n};\n","'use strict';\n\nvar CharMaps = require('./CharacterMaps');\n\n// Breaks the maze text into lines according to the maze's max width.\nmodule.exports = function(text, maxMazeWidth, locationSize) {\n\n    var i;\n\n    // Array of strings, one string for each line.\n    var lines = [''];\n\n    // Restrict to a whitelist of characters, and split on a space.\n    var words = CharMaps.cleanText(text).split(' ');\n\n    // Number of maze locations the current word will require horizontally.\n    var wordLen;\n\n    // Max length (in maze locations) of a line of text in the maze.\n    // Do not include maze border on either side (-2).\n    // So padding the line out with spaces is easy, keep the line another two\n    // less than the length between borders (-2).\n    var maxLineLen = maxMazeWidth / locationSize - 2 - 2;\n\n    // Length (in maze locations) of word spacing.\n    var wordSpacingLen = 4;\n\n    // State shared with hyphenate function.\n    var state = {\n\n        // Number of maze locations the current word will require horizontally.\n        currLineIdx: 0,\n\n        // Current length (in maze locations) of the current line of text.\n        lineLen: 0\n    };\n\n    for (i = 0; i < words.length; i++) {\n\n        wordLen = getWordLength(words[i]);\n\n        // If this is the very first word add it to the line, hyphenating if needed (special case).\n        if (state.lineLen === 0) {\n            if (wordLen > maxLineLen) {\n                hyphenateWord(lines, words[i], state, maxLineLen);\n            }\n            else {\n                lines[state.currLineIdx] += words[i];\n                state.lineLen += wordLen;\n            }\n        }\n\n        // If the current word fits on current line, add it to the line.\n        else if (state.lineLen + wordSpacingLen + wordLen <= maxLineLen) {\n            lines[state.currLineIdx] += ' ' + words[i];\n            state.lineLen += wordSpacingLen + wordLen;\n        }\n\n        // TODO Hyphenate words if line still has lots of space but and current word won't fit.\n\n        // If the current word fits on a new line, add it to a new line.\n        else if (wordLen <= maxLineLen) {\n            lines[++state.currLineIdx] = words[i];\n            state.lineLen = wordLen;\n        }\n\n        // The current word doesn't fit on the current line or a new line, so hyphenate it.\n        else {\n            ++state.currLineIdx;\n            hyphenateWord(lines, words[i], state, maxLineLen);\n        }\n    }\n\n    return lines;\n};\n\n// Returns the number of maze locations the word will require horizontally in the maze\n// including a single location between each character.\nfunction getWordLength(word) {\n    var i, length = 0, wordChars = word.split('');\n\n    // Space between each character in the maze.\n    var charSpacing = 1;\n\n    for (i = 0; i < wordChars.length; i++) {\n        length += CharMaps.getLengthOfCharInMaze(wordChars[i]);\n\n        // Add character spacing after each character but the last.\n        if (i < wordChars.length - 1) {\n            length += charSpacing;\n        }\n    }\n\n    return length;\n}\n\nfunction hyphenateWord(lines, word, state, maxLineLen) {\n\n    var i, chars = word.split('');\n\n    // The length (in maze locations) the next character will require in the maze.\n    var nextLen;\n\n    // The current length of the front part of the hyphenated word.\n    var length = 0;\n\n    // The parts to the left (front) and right (back) of the hyphen.\n    var front = '', back = '';\n\n    var wordLen;\n\n    var charSpacing = 1;\n\n    for (i = 0; i < chars.length; i++) {\n\n        nextLen = charSpacing + CharMaps.getLengthOfCharInMaze(chars[i]);\n\n        // Break if char overflows the maze; account hyphen's character spacing.\n        if (length + nextLen > maxLineLen - charSpacing - CharMaps.getLengthOfCharInMaze('-')) {\n            break;\n        }\n\n        front += chars[i];\n        length += nextLen;\n    }\n\n    // Add the front part to the current line.\n    lines[state.currLineIdx] = front + '-';\n\n    // The back part becomes the current word.\n    back = word.slice(front.length);\n    wordLen = getWordLength(back);\n\n    // Hyphenate again if necessary, or just add the back part to a new line.\n    if (wordLen > maxLineLen) {\n        ++state.currLineIdx;\n        hyphenateWord(lines, back, state, maxLineLen);\n    }\n    else {\n        lines[++state.currLineIdx] = back;\n        state.lineLen = wordLen;\n    }\n}\n","'use strict';\n\n// An object to represent one of a Character's four sides. For every Character\n// added as a path in the maze, its four sides (four Side objects) are added\n// to a list. The list is shuffled to randomly add other Characters to the maze's\n// path, by finding a Character opposite the side next chosen from the list.\nmodule.exports = {\n       \n    init: function(ofChar, whichSide) {\n\n        // A reference to the Character object this Side belongs to.\n        this.ofChar = ofChar;\n\n        // One of: top right bottom left\n        this.whichSide = whichSide;\n    },\n\n    // Returns the name of this Side's opposite side.\n    getNameOfOppositeSide: function() {\n\n        var lookupTable = {\n            'top': 'bottom',\n            'right': 'left',\n            'bottom': 'top',\n            'left': 'right'\n        };\n\n        return lookupTable[this.whichSide];\n    }\n};\n","'use strict';\n\nvar utils    = require('../../utils');\nvar CharMaps = require('../CharacterMaps');\n\n// Creates a connection array for each space Character in the maze that indicates\n// which locations in the space are to be considered connected as a path\n// in the maze.\nmodule.exports = function(maze, charlist) {\n\n    var i, j;\n    \n    // Coordinates for the current space Character.\n    var x, y;\n\n    // Locations in the space Character from loIdx to hiIdx indicate which part\n    // of the space Character is connected in the maze. This span, from low\n    // to high, intersects all connections coming into the space Character.\n    var loIdx, hiIdx;\n\n    var charHgt = CharMaps.getCharHeight();\n\n    // Helper when building the connection array after low and high indices are found.\n    var connect;\n\n    // 'true' indicates a location in a space Character connected in the maze.\n    var connections;\n\n    // Helper when building the connection array.\n    var stop;\n\n    // Create a connection array for each space Character.\n    for (i = 0; i < charlist.length; i++) {\n        if (charlist[i].ch === ' ') {\n            \n            // Set the coordinates for the current space Character.\n            x = charlist[i].topLeftX;\n            y = charlist[i].topLeftY;\n\n            loIdx = null;\n            hiIdx = null;\n\n            // Examine each location in the space Character to determine if it is connected\n            // as a path in the maze.\n            for (j = 0; j < charHgt; j++) {\n\n                switch (true) {\n\n                    // The top location in the space is connected from above, left or right.\n                    case j === 0 && (maze[y-1][x].connected || maze[y+j][x-1].connected || maze[y+j][x+1]):\n                        loIdx = j;\n                        break;\n\n                    // The current location in the space is connected from both left and right.\n                    case maze[y+j][x-1].connected && maze[y+j][x+1].connected:\n                        if (loIdx === null) {\n                            loIdx = j;\n                            hiIdx = j;\n                        }\n                        else {\n                            hiIdx = j;\n                        }\n                        break;\n\n                    // The current location in the space is connected from either the left or right.\n                    case maze[y+j][x-1].connected || maze[y+j][x+1].connected:\n                        if (loIdx === null) {\n                            loIdx = j;\n                        }\n                        else {\n                            hiIdx = j;\n                        }\n                        break;\n\n                    // The bottom location in the space is connected from below.\n                    case j === charHgt-1 && maze[y+j+1][x].connected:\n                        if (loIdx === null) {\n                            loIdx = j;\n                        }\n                        else {\n                            hiIdx = j;\n                        }\n                        break;\n                }\n            }\n\n            connections = [];\n\n            // At least two connections were made into the space, so connect from low\n            // to high in the space as a path in the maze, to connect these connections.\n            if (loIdx !== null && hiIdx !== null) {\n                for (j = 0; j < charHgt; j++) {\n                    if (j >= loIdx && j <= hiIdx) {\n                        connections.push(true);\n                    }\n                    else {\n                        connections.push(false);\n                    }\n                }\n            }\n\n            // Only one connection was made into the space, so the space is a dead\n            // end in the maze. Randomly choose some part of the space beginning\n            // from the connection point to connect as a path in the maze.\n            // i.e. set 'true' in the connection array, from loIdx to some other\n            // randomish index.\n            else if (loIdx !== null) {\n\n                switch (true) {\n\n                    // Connect from the top of the space to some random location lower\n                    // in the space.\n                    case loIdx === 0:\n                        connect = true;\n                        stop = utils.randomInRange(2, charHgt-1);\n\n                        for (j = 0; j < charHgt; j++) {\n                            if (j === stop) {\n                                connect = false;\n                            }\n                            connections.push(connect);\n                        }\n                        break;\n\n                    // Connect from the bottom of the space to some random location\n                    // higher in the space.\n                    case loIdx === charHgt - 1:\n                        connect = true;\n                        stop = utils.randomInRange(0, charHgt-3);\n\n                        for (j = charHgt-1; j >= 0; j--) {\n                            if (j === stop) {\n                                connect = false;\n                            }\n                            connections.unshift(connect);\n                        }\n                        break;\n\n                    // Connect from loIdx to the bottom of the space.\n                    case Math.random() > 0.5:\n                        connect = false;\n                        for (j = 0; j < charHgt; j++) {\n                            if (j === loIdx) {\n                                connect = true;\n                            }\n                            connections.push(connect);\n                        }\n                        break;\n\n                    // Connect from loIdx to the top of the space.\n                    default:\n                        connect = false;\n                        for (j = charHgt-1; j >= 0; j--) {\n                            if (j === loIdx) {\n                                connect = true;\n                            }\n                            connections.unshift(connect);\n                        }\n                }\n            }\n\n            // No other Characters connected to this space.\n            else {\n                connections = [0,0,0,0,0];\n            }\n\n            // Store the connection array in its corresponding space Character.\n            maze[y][x].spaceCharConnectionArray = connections;\n        }\n    }\n};\n","'use strict';\n\nvar utils    = require('../../utils');\nvar CharMaps = require('../CharacterMaps');\n\n// Returns a Character adjacent to the given side of a Character, or null if\n// the side has no adjacent Character\nmodule.exports = function(maze, side) {\n\n    var i;\n\n    // Coordinates of a Character in the maze\n    var x = -1, y = -1;\n\n    // Find coordinates of a Character adjacent to this Side\n    switch (side.whichSide) {\n\n        case 'top': \n            y = side.ofChar.topLeftY - 2;\n            x = getXCoordForRandomAdjacentChar(maze, side.ofChar, y);\n            break;\n\n        case 'right': \n            y = side.ofChar.topLeftY;\n            x = side.ofChar.topLeftX + CharMaps.getLengthOfCharInMaze(side.ofChar.ch) + 1;\n            break;\n\n        case 'bottom': \n            y = side.ofChar.topLeftY + CharMaps.getCharHeight() + 1;\n            x = getXCoordForRandomAdjacentChar(maze, side.ofChar, y);\n            break;\n\n        case 'left': \n            y = side.ofChar.topLeftY;\n            x = side.ofChar.topLeftX - 2;\n            break;\n\n        default:\n            throw new Error('Invalid side');\n    }\n\n    return isValidCharacterLoc(maze, x, y) ? maze[y][x] : null;\n};\n\n// Collect all x coordinates for Character into an array\nfunction getXCoordsOfChar(ch) {\n    var i, xCoords = [];\n\n    var charLen = CharMaps.getLengthOfCharInMaze(ch.ch);\n\n    for (i = ch.topLeftX; i < ch.topLeftX + charLen; i++) {\n        xCoords.push(i);\n    }\n\n    return xCoords;\n}\n\n// Returns true if the coordinates refer to a Character object in the maze\nfunction isValidCharacterLoc(maze, x, y) {\n    return y >= 0 &&\n           x >= 0 &&\n           y < maze.length &&\n           x < maze[y].length &&\n           typeof maze[y][x] === 'object' &&\n           'ch' in maze[y][x] &&\n           maze[y][x].ch !== null;\n}\n\n// A helper for finding Characters above or below another Character in the maze\n// Returns the x coord of a Character on the given row y that has x coordinates\n// overlapping those of the given character\nfunction getXCoordForRandomAdjacentChar(maze, character, y) {\n    var i;\n\n    // A shuffled list of all possible x coordinates for the adjacent Character\n    var xCoords = getXCoordsOfChar(character);\n\n    // Shuffle the possible x coordinates\n    utils.shuffleArrayInPlace(xCoords);\n\n    // Return the first x coordinate that refers to a Character object\n    for (i = 0; i < xCoords.length; i++) {\n        if (isValidCharacterLoc(maze, xCoords[i], y)) {\n            return xCoords[i];\n        }\n    }\n\n    // No adjacent Character objects found\n    return null;\n}\n","'use strict';\n\nvar utils    = require('../../utils');\nvar CharMaps = require('../CharacterMaps');\n\n// Creates a horizontal connection in the maze between two Characters that are\n// situated one beside the other such that their y coordinates are exactly the\n// same (all characters have a map of equal height).\nmodule.exports = function(maze, ch1Side, ch2) {\n\n    var i;\n\n    // Save some typing.\n    var ch1 = ch1Side.ofChar;\n\n    // Get connection options for each Character.\n    var ch1Opts = CharMaps.getConnectionOptsForSideOfChar(ch1.ch, ch1Side.whichSide);\n    var ch2Opts = CharMaps.getConnectionOptsForSideOfChar(ch2.ch, ch1Side.getNameOfOppositeSide());\n\n    // Get this connection's x coordinate.\n    var x = ch1.topLeftX < ch2.topLeftX ? ch2.topLeftX-1 : ch1.topLeftX-1;\n\n    var y;\n\n    var charHgt = CharMaps.getCharHeight();\n\n    // A random index from which to start the search for a connection; rolls over\n    // so all options are examined when necessary.\n    var idx = utils.randomInRange(0, charHgt - 1);\n\n    var specialCaseConnection;\n\n\n    // Query for a hardcoded special case connection, in case one exists. Make sure\n    // the query parameters are ordered correctly (left Character, right Character).\n    if (ch1.topLeftX < ch2.topLeftX) {\n        specialCaseConnection = findSpecialCase(ch1.ch, ch2.ch);\n    }\n    else {\n        specialCaseConnection = findSpecialCase(ch2.ch, ch1.ch);\n    }\n\n\n    // Now find a connection between the given characters, and set that connection in\n    // the maze between the Characters.\n\n\n    // Special case: A hardcoded special case was found, so use it: copy the bit array\n    // values into the maze between the Characters being connected.\n    if (specialCaseConnection) {\n        y = ch1.topLeftX < ch2.topLeftX ? ch2.topLeftY : ch1.topLeftY;\n\n        for (i = 0; i < specialCaseConnection.length; i++) {\n            if (specialCaseConnection[i]) {\n                // Set connected on the blank Characters that are part of the special\n                // connection.\n                maze[y][x].connected = true;\n            }\n            y++; \n        }\n\n        // Set connected on the unconnected Character.\n        ch2.connected = true;\n\n        return;\n    }\n\n    // Normal case: randomly choose a connection option compatible with\n    // both Characters.\n    for (i = 0; i < charHgt; i++) {\n\n        if (ch1Opts[idx] + ch2Opts[idx] === 2) {\n            // Set connected on the blank Character that makes the connection.\n            maze[ch2.topLeftY + idx][x].connected = true;\n\n            // Set connected on the unconnected Character.\n            ch2.connected = true;\n\n            return;\n        }\n\n        idx = (idx + 1) % charHgt;\n    }\n};\n\n// Returns the hardcoded special-case-connection bit array for leftChar\n// connecting to rightChar, if it exists, otherwise returns null.\nfunction findSpecialCase(leftChar, rightChar) {\n\n    // All the hardcoded special cases.\n    var cases = {\n        'BT': [1,1,1,0,0],\n        'B7': [1,1,1,0,0],\n        'B?': [1,1,1,0,0],\n        \"B'\": [0,1,1,0,0],\n        'C-': function() {\n            return Math.random() > 0.5 ? [1,1,1,0,0] : [0,0,1,1,1];\n        },\n        'DI': function() {\n            return Math.random() > 0.5 ? [1,1,0,0,0] : [0,0,0,1,1];\n        },\n        'DT': [1,1,0,0,0],\n        'DZ': function() {\n            return Math.random() > 0.5 ? [1,1,0,0,0] : [0,0,0,1,1];\n        },\n        'D7': [1,1,0,0,0],\n        'D.': [0,0,0,1,1],\n        'D?': [1,1,0,0,0],\n        'FJ': [0,0,1,1,0],\n        'F1': function() {\n            return Math.random() > 0.33 ? [1,1,0,0,0]\n                : Math.random() > 0.5 ? [0,1,1,0,0]\n                    : [0,0,1,1,1];\n        },\n        'F.': [0,0,1,1,1],\n        'I-': function() {\n            return Math.random() > 0.5 ? [1,1,1,0,0] : [0,0,1,1,1];\n        },\n        'K-': function() {\n            return Math.random() > 0.5 ? [0,1,1,0,0] : [0,0,1,1,0];\n        },\n        'LT': [1,1,1,1,1],\n        'LV': [0,0,0,1,1],\n        'L4': [0,0,1,1,1],\n        'L7': [1,1,1,1,1],\n        'L9': [0,0,1,1,1],\n        'L?': [1,1,1,1,1],\n        'L-': [0,0,1,1,1],\n        \"L'\": [0,1,1,1,1],\n        'L*': [0,0,1,1,1],\n        \"PJ\": [0,0,1,1,0],\n        'P.': [0,0,1,1,1],\n        'QT': [1,1,1,1,1],\n        'QV': [0,0,0,1,1],\n        'Q4': [0,0,1,1,1],\n        'Q7': [1,1,1,1,1],\n        'Q9': [0,0,1,1,1],\n        'Q?': [1,1,1,1,1],\n        'Q-': [0,0,1,1,1],\n        \"Q'\": [0,1,1,1,1],\n        'Q*': [0,0,1,1,1],\n        'RT': [1,1,1,1,0],\n        'R4': [0,0,1,1,0],\n        'R7': [1,1,1,1,0],\n        'R9': [0,0,1,1,0],\n        'R?': [1,1,1,1,0],\n        'R-': [0,0,1,1,0],\n        \"R'\": [0,1,1,1,0],\n        'R*': [0,0,1,1,0],\n        'TJ': [1,1,1,1,0],\n        'T1': [1,1,0,0,0],\n        'T.': [1,1,1,1,1],\n        'T-': [1,1,1,0,0],\n        'V.': [0,0,0,1,1],\n        'X-': function() {\n            return Math.random() > 0.5 ? [0,1,1,0,0] : [0,0,1,1,0];\n        },\n        'Z-': function() {\n            return Math.random() > 0.5 ? [1,1,1,0,0] : [0,0,1,1,1];\n        },\n        '1T': [1,1,1,1,1],\n        '1V': [0,0,0,1,1],\n        '14': [0,0,1,1,1],\n        '17': [1,1,1,1,1],\n        '19': [0,0,1,1,1],\n        '1?': [1,1,1,1,1],\n        '1-': [0,0,1,1,1],\n        \"1'\": [0,1,1,1,1],\n        '1*': [0,0,1,1,1],\n        '51': [0,0,0,1,1],\n        '5.': [0,0,0,1,1],\n        '5-': [0,0,1,1,0],\n        '.T': [1,1,1,1,1],\n        '.V': [0,0,0,1,1],\n        '.4': [0,0,1,1,1],\n        '.7': [1,1,1,1,1],\n        '.9': [0,0,1,1,1],\n        '.?': [1,1,1,1,1],\n        '.-': [0,0,1,1,1],\n        \".'\": [0,1,1,1,1],\n        '.*': [0,0,1,1,1],\n        '?J': [0,0,1,1,0],\n        '?.': [0,0,1,1,1],\n        '-I': function() {\n            return Math.random() > 0.5 ? [1,1,1,0,0] : [0,0,1,1,1];\n        },\n        '-J': [0,0,1,1,0],\n        '-T': [1,1,1,0,0],\n        '-X': function() {\n            return Math.random() > 0.5 ? [0,1,1,0,0] : [0,0,1,1,0];\n        },\n        '-Z': function() {\n            return Math.random() > 0.5 ? [1,1,1,0,0] : [0,0,1,1,1];\n        },\n        '-1': function() {\n            return Math.random() > 0.5 ? [0,1,1,0,0] : [0,0,1,1,1];\n        },\n        '-7': [1,1,1,0,0],\n        '-.': [0,0,1,1,1],\n        '-?': [1,1,1,0,0],\n        \"-'\": [0,1,1,0,0],\n        \"'J\": [0,1,1,1,0],\n        \"'.\": [0,1,1,1,1],\n        \"'-\": [0,1,1,0,0],\n        '*T': [1,1,1,0,0],\n        '*7': [1,1,1,0,0],\n        '*?': [1,1,1,0,0],\n        \"*'\": [1,1,1,0,0]\n    };\n\n    var result = null;\n\n    // Create the index into the cases hash.\n    var specialCase = '' + leftChar.toUpperCase() + rightChar.toUpperCase();\n\n    if (specialCase in cases) {\n        result = (typeof cases[specialCase] === 'function') ? cases[specialCase]() : cases[specialCase];\n    }\n\n    return result;\n}\n","'use strict';\n\nvar utils               = require('../../utils');\nvar findAdjacentChar    = require('./find-adjacent-character');\nvar connectHorizontally = require('./horizontally.js');\nvar connectVertically   = require('./vertically.js');\nvar CharacterSide       = require('./CharacterSide');\nvar connectSpaces       = require('./connect-spaces');\n\n// Builds the maze by connecting the embedded characters.\nmodule.exports = function(maze, charlist) {\n\n    // Create and push four Side objects onto the side list, one for\n    // each side of param 'character'.\n    function addSidesOfCharToSidelist(character, sidelist) {\n        var i, s, sides = ['top', 'right', 'bottom', 'left'];\n\n        for (i = 0; i < sides.length; i++) {\n            s = Object.create(CharacterSide);\n            s.init(character, sides[i]);\n\n            sidelist.push(s);\n        }\n    }\n\n    // Sides of Characters to be connected.\n    var side, sidelist = [];\n\n    // A Character adjacent to a given Side.\n    var adjChar;\n\n    // Start building from a random Character.\n    var startCharIdx = utils.randomInRange(0, charlist.length-1);\n\n    // Connect the first Character.\n    charlist[startCharIdx].connected = true;\n\n    // Add the first Character's sides to the side list.\n    addSidesOfCharToSidelist(charlist[startCharIdx], sidelist);\n\n    while (sidelist.length) {\n        utils.shuffleArrayInPlace(sidelist);\n\n        side = sidelist.pop();\n\n        // Sometimes an adjacent Character won't be found when looking above or below.\n        adjChar = findAdjacentChar(maze, side);\n\n        // Try to connect the side to the adjacent Character.\n        if (adjChar && !adjChar.connected) {\n            if (side.whichSide === 'left' || side.whichSide === 'right') {\n                connectHorizontally(maze, side, adjChar);\n            }\n            else {\n                connectVertically(maze, side, adjChar);\n            }\n\n            // Sometimes a vertical connection won't be made; in that case don't\n            // add the sides of the unconnnected adjacent Character.\n            if (adjChar.connected) {\n                addSidesOfCharToSidelist(adjChar, sidelist);\n            }\n        }\n    }\n\n    connectSpaces(maze, charlist);\n\n    return;\n};\n","'use strict';\n\nvar utils    = require('../../utils');\nvar CharMaps = require('../CharacterMaps');\n\n// Creates a vertical connection in the maze between two Characters that are\n// situated one above the other (their x coordinates overlap by at least one\n// column in the maze).\nmodule.exports = function(maze, ch1Side, ch2) {\n\n    var i;\n\n    // Save some typing.\n    var ch1 = ch1Side.ofChar;\n\n    // Get connection options for each Character.\n    var ch1Opts = CharMaps.getConnectionOptsForSideOfChar(ch1.ch, ch1Side.whichSide);\n    var ch2Opts = CharMaps.getConnectionOptsForSideOfChar(ch2.ch, ch1Side.getNameOfOppositeSide());\n\n    // Get this connection's static y coordinate.\n    var y = ch1.topLeftY < ch2.topLeftY ? ch2.topLeftY-1 : ch1.topLeftY-1;\n\n    // Get the length of each Character.\n    var ch1Len = CharMaps.getLengthOfCharInMaze(ch1.ch);\n    var ch2Len = CharMaps.getLengthOfCharInMaze(ch2.ch);\n\n    // Get the start index for looping through each Character's connection options\n    // based on where the Characters begin overlapping along the x axis.\n    var ch1Start = (ch1.topLeftX <= ch2.topLeftX) ? Math.abs(ch1.topLeftX - ch2.topLeftX) : 0;\n    var ch2Start = (ch1.topLeftX <= ch2.topLeftX) ? 0 : Math.abs(ch1.topLeftX - ch2.topLeftX);\n\n    // Get the length of the overlap in columns of the maze.\n    var overlap = (ch1Len-ch1Start <= ch2Len-ch2Start) ? ch1Len-ch1Start : ch2Len-ch2Start;\n\n    // Get the end index for looping through each Character's connection options.\n    var ch1End = ch1Start + overlap - 1;\n    var ch2End = ch2Start + overlap - 1;\n\n    // Choose a random start index within the start and end indices, and roll over to start\n    // when end is exceeded in the loop.\n    var ch1Idx = utils.randomInRange(ch1Start, ch1End);\n    var ch2Idx = ch2Start + ch1Idx - ch1Start;\n\n\n    // Loop for the length of the overlap\n    for (i = 0; i < overlap; i++) {\n \n        // Search for a column in the maze in which both Characters are able to connect.\n        if (ch1Opts[ch1Idx] + ch2Opts[ch2Idx] === 2) {\n            maze[y][ch2.topLeftX + ch2Idx].connected = true;\n            ch2.connected = true;\n            return;\n        }\n\n        // Roll over to start index when end is exceeded.\n        ch1Idx = ch1Idx > ch1End ? ch1Start : ch1Idx + 1;\n        ch2Idx = ch2Idx > ch2End ? ch2Start : ch2Idx + 1;\n    }\n\n    return;\n};\n","'use strict';\n\nvar CharMaps       = require('./CharacterMaps');\nvar Character      = require('./Character');\n\nmodule.exports = function(maze, charlist, lines) {\n\n    var i, j, k, l, ch;\n\n    var charHgt = CharMaps.getCharHeight();\n\n    // For initializing the Character objects.\n    var character, blank;\n\n    // Length of lines above and below a blank line.\n    // The larger of the two will be the numCharBlanksToAdd to the blank line.\n    var lenAbove, lenBelow, numCharBlanksToAdd;\n\n    // Add a blank line at the top of the maze.\n    maze.push([]);\n\n    // For each line of text.\n    for (i = 0; i < lines.length; i++) {\n\n        // Add arrays to the maze to build this line of text into the maze.\n        // Start each array with a blank Character to create the maze's left border.\n        for (j = 0; j < charHgt; j++) {\n            blank = Object.create(Character);\n            blank.initBlank();\n            maze.push([blank]);\n        }\n\n        // Add each character in the current line to the maze.\n        for (j = 0; j < lines[i].length; j++) {\n            ch = lines[i].charAt(j);\n\n            character = Object.create(Character);\n            character.init(ch, maze[maze.length - charHgt].length, maze.length - charHgt);\n            charlist.push(character);\n\n            // Add each row of the current Character's character map to the current\n            // line of text in the maze.\n            for (k = charHgt; k > 0; k--) {\n\n                // Push a reference to the current Char into each location in the maze that the Char occupies.\n                for (l = 0; l < CharMaps.getLengthOfCharInMaze(ch); l++) {\n                    maze[maze.length - k].push(character);\n                }\n\n                // Add spacing between characters using blank Character.\n                if (lines[i].length) {\n                    blank = Object.create(Character);\n                    blank.initBlank();\n                    maze[maze.length - k].push.call(maze[maze.length - k], blank);\n                }\n            }\n        }\n\n        // Add a blank line after every embeded line of text.\n        if (i < lines.length - 1) {\n            maze.push([]);\n        }\n    }\n\n    // Add a blank line at the bottom of the maze.\n    maze.push([]);\n\n    // Add blank Character to the blank lines.\n    for (i = 0; i < maze.length; i += 6) {\n        lenAbove = (i === 0) ? 0 : maze[i-1].length;\n\n        lenBelow = (i === maze.length-1) ? 0 : maze[i+1].length;\n\n        numCharBlanksToAdd = (lenAbove > lenBelow) ? lenAbove : lenBelow;\n\n        for (j = 0; j < numCharBlanksToAdd; j++) {\n            blank = Object.create(Character);\n            blank.initBlank();\n            maze[i].push(blank);\n        }\n    }\n\n    // Nothing to return; this module modifies its parameters 'maze' and 'charlist'\n    return;\n};\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = function(maze) {\n    var x, y, i;\n\n    var locations = [];\n\n    for (y = 0; y < maze.length; y++) {\n        for (x = 0; x < maze[y].length; x++) {\n            locations.push([x, y]);\n        }\n    }\n\n    utils.shuffleArrayInPlace(locations);\n\n    for (i = 0; i < locations.length; i++) {\n        x = locations[i][0];\n        y = locations[i][1];\n\n        if (y > 0 && x > 0 && y < maze.length-1 && x < maze[y].length-1) {\n            if (!maze[y][x].path) {\n                checkAround(maze, x, y);\n            }\n        }\n    }\n};\n\nfunction checkAround(maze, x, y) {\n    var i, adjacent, addPath = false;\n\n    var onlyOneConnection = maze[y-1][x].path +\n                            maze[y+1][x].path +\n                            maze[y][x-1].path +\n                            maze[y][x+1].path === 1;\n\n    if (!onlyOneConnection) {\n        return false;\n    }\n\n    switch (true) {\n        case maze[y-1][x].path:\n            addPath = maze[y+1][x-1].path + maze[y+1][x+1].path === 0;\n            break;\n\n        case maze[y+1][x].path:\n            addPath = maze[y-1][x-1].path + maze[y-1][x+1].path === 0;\n            break;\n\n        case maze[y][x-1].path:\n            addPath = maze[y-1][x+1].path + maze[y+1][x+1].path === 0;\n            break;\n\n        case maze[y][x+1].path:\n            addPath = maze[y-1][x-1].path + maze[y+1][x-1].path === 0;\n    }\n\n    if (addPath) {\n        maze[y][x].path = true;\n        maze[y][x].connection = true;\n\n        adjacent = [[x,y-1], [x,y+1], [x-1,y], [x+1,y]];\n\n        utils.shuffleArrayInPlace(adjacent);\n\n        for (i = 0; i < adjacent.length; i++) {\n            x = adjacent[i][0];\n            y = adjacent[i][1];\n\n            if (!maze[y][x].path) {\n                if (y > 0 && x > 0 && y < maze.length-1 && x < maze[y].length-1) {\n                    checkAround(maze, x, y);\n                }\n            }\n        }\n    }\n}\n","'use strict';\n\n// Simplify the maze so it's easier to paint, solve, etc: each location in the\n// maze will reference its own object.\nmodule.exports = function(maze, state) {\n    var x, y, endpoints = state.endpoints;\n\n    for (y = 0; y < maze.length; y++) {\n        for (x = 0; x < maze[y].length; x++) {\n\n            maze[y][x] = maze[y][x].flattenCharacter(x, y, state.colors);\n        }\n    }\n\n    // Set the maze's start.\n    maze[endpoints.start.y][endpoints.start.x].start      = true;\n    maze[endpoints.start.y][endpoints.start.x].path       = true;\n    maze[endpoints.start.y][endpoints.start.x].connection = true;\n\n    // Set the end endpoint.\n    maze[endpoints.end.y][endpoints.end.x].end            = true;\n    maze[endpoints.end.y][endpoints.end.x].path           = true;\n    maze[endpoints.end.y][endpoints.end.x].connection     = true;\n};\n","'use strict';\n\nvar breakTextIntoLines = require('./break-text-into-lines');\nvar padLines           = require('./pad-lines');\nvar embedText          = require('./embed-text');\nvar connectCharacters  = require('./connect-characters/index');\nvar setEndpoints       = require('./set-endpoints');\nvar flatten            = require('./flatten');\nvar fillOut            = require('./fill-out');\nvar autoSize           = require('../load/auto-size');\nvar solve              = require('../solve');\n\nmodule.exports = function(state) {\n\n    var lines = breakTextIntoLines(state.text, state.maxMazeWidth, state.locationSize);\n\n    padLines(lines, state.maxMazeWidth, state.locationSize);\n\n    var maze = [];\n\n    // Ordered list of Character objects embedded in the maze.\n    var charlist = [];\n\n    embedText(maze, charlist, lines);\n\n    connectCharacters(maze, charlist);\n\n    verifyConnections(maze, state, lines, charlist);\n\n    setEndpoints(maze, state.endpoints);\n\n    flatten(maze, state);\n\n    fillOut(maze);\n\n    solve.setSolution(maze, state);\n\n    return maze;\n};\n\n// TODO Better vertical character connection alg.\n// Vertical connections don't always happen. For that reason the maze\n// is not always fully connected. This is a precaution/hack against\n// trying to render unconnected mazes. (It's a hack because auto-size\n// shouldn't be imported, and its functions shouldn't be copied into\n// this this one.\nfunction verifyConnections(maze, state, lines, charlist) {\n\n    function getMaxMazeWidth(mazeMargin, locationSize) {\n        var windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        var max         = windowWidth * (1 - mazeMargin * 2);\n\n        return max - (max % locationSize);\n    }\n\n    for (var i = 0; i < charlist.length; i++) {\n\n        if (!charlist[i].connected) {\n\n            state.text = 'error! try again';\n\n            document.getElementById('maze-reset-ctrl').removeAttribute('disabled');\n\n            autoSize(state, getMaxMazeWidth);\n            lines = breakTextIntoLines(state.text, state.maxMazeWidth, state.locationSize);\n            padLines(lines, state.maxMazeWidth, state.locationSize);\n            maze.length = 0;\n            charlist.length = 0;\n            embedText(maze, charlist, lines);\n            connectCharacters(maze, charlist);\n\n            break;\n        }\n    }\n}\n","'use strict';\n\nvar CharMaps = require('./CharacterMaps');\n\nmodule.exports = function(lines, maxMazeWidth, locationSize) {\n    var i, j, chars, lineLen = 0;\n\n    var charSpacing = 1;\n\n    // Size does not include maze border on either side (-2).\n    var maxLineLen = maxMazeWidth / locationSize - 2;\n\n    for (i = 0; i < lines.length; i++) {\n\n        chars = lines[i].split('');\n\n        // Line length includes character spacing and a border at either end.\n        lineLen = charSpacing * (chars.length - 1);\n\n        // Add length of each character to the line length.\n        for (j = 0; j < chars.length; j++) {\n\n            lineLen += CharMaps.getLengthOfCharInMaze(chars[j]);\n        }\n\n        // Add special padding character to help pad to very end of line\n        // when num spaces to pad is odd.\n        if (maxLineLen - lineLen >= 3 && (maxLineLen - lineLen) % 2 === 1) {\n            lines[i] += '*';\n            lineLen += charSpacing + CharMaps.getLengthOfCharInMaze('*');\n        }\n\n        // Pad to end of line with spaces.\n        while (lineLen < maxLineLen) {\n            lines[i] += ' ';\n            lineLen += charSpacing + CharMaps.getLengthOfCharInMaze(' ');\n        }\n    }\n};\n","'use strict';\n\nvar CharMaps = require('./CharacterMaps');\n\n// Determine and set the coordinates for where the maze starts and ends.\nmodule.exports = function(maze, endpoints) {\n    var i, x, y, character, opts;\n\n    // Start the maze to the left of the first character.\n    character = maze[1][1];\n    opts = CharMaps.getConnectionOptsForSideOfChar(character.ch, 'left');\n\n    // Start adjacent to the highest part of the first character.\n    for (i = 0; i < opts.length; i++) {\n        if (opts[i]) {\n            endpoints.start.x = 0;\n            endpoints.start.y = i + 1;\n            break;\n        }\n    }\n\n    // End the maze to the right of the last character.\n    y = maze.length - CharMaps.getCharHeight() - 1;\n    x = maze[y].length - 2;\n\n    character = maze[y][x];\n\n    // If last character is a space, set its lower locations to connected\n    // so the maze's end can be in the very bottom corner.\n    if (character.ch === ' ') {\n        for (i = CharMaps.getCharHeight() - 1; i >= 0; i--) {\n            if (character.spaceCharConnectionArray[i]) {\n                break;\n            }\n            else {\n                character.spaceCharConnectionArray[i] = 1;\n            }\n        }\n\n        opts = character.spaceCharConnectionArray;\n    }\n    else {\n        opts = CharMaps.getConnectionOptsForSideOfChar(character.ch, 'right');\n    }\n\n    // End adjacent to the lowest possible part of the last character.\n    for (i = 0; i < opts.length; i++) {\n        if (opts[opts.length - 1 - i]) {\n            endpoints.end.x = x + 1;\n            endpoints.end.y = y + CharMaps.getCharHeight() - 1 - i;\n            break;\n        }\n    }\n};\n","'use strict';\n\nvar utils     = require('../utils');\nvar load      = require('../load/index');\nvar build     = require('../build/index');\nvar CharMaps  = require('../build/CharacterMaps');\nvar paint     = require('../paint/index');\nvar webColors = require('../paint/web-colors');\nvar solve     = require('../solve');\nvar view      = require('./view');\nvar mainView  = require('../view');\n\nmodule.exports = {\n\n    // Initialize controls and register control listeners.\n    init: function(maze, canvas, state) {\n\n        var ctrls = {\n\n            // Rebuild the maze with current text.\n            'maze-rebuild-ctrl': {\n                action: function(evt) {\n                    maze = rebuild(maze, canvas, state);\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Toggle showing/hiding maze text.\n            'maze-show-text-ctrl': {\n                init: function() {\n                    view.updateShowingTextCtrl(state);\n                },\n                action: function(evt) {\n                    state.currentlyShowingText = !state.currentlyShowingText;\n                    view.updateShowingTextCtrl(state, ctrls);\n\n                    solve.reset(maze, state);\n                    paint.all(maze, canvas, state);\n\n                    view.enableCtrlById('maze-solve-start-ctrl');\n                    view.disableCtrlById('maze-solve-pause-ctrl');\n                    view.disableCtrlById('maze-solve-reset-ctrl');\n\n                    evt.stopPropagation();\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // To ensure elements exist with these ids.\n            'maze-show-text-label': {},\n            'maze-hide-text-label': {},\n\n            'maze-color-text-random': {\n                action: function() {\n                    colorText(maze, canvas, state, webColors.randomBrightWebColor());\n                },\n                type: 'click'\n            },\n\n            'maze-color-text-default': {\n                init: function() {\n                    // No need to have two ways to color the text black.\n                    if (state.colors.textDefault === 'black') {\n                       view.hideControlById('maze-color-text-default');\n                    }\n                },\n                action: function() {\n                    colorText(maze, canvas, state, state.colors.textDefault);\n                },\n                type: 'click'\n            },\n\n            'maze-color-text-black': {\n                action: function() {\n                    colorText(maze, canvas, state, 'black');\n                },\n                type: 'click'\n            },\n\n            'maze-fluctuate-text-color': {\n                init: function() {\n                    view.updateFluctuateTextColorCtrl(state);\n                },\n                action: function() {\n                    state.colors.fluctuateTextColor = !state.colors.fluctuateTextColor;\n                    view.updateFluctuateTextColorCtrl(state);\n                    if (state.colors.fluctuateTextColor && !state.currentlyShowingText) {\n                        view.toggleShowingText();\n                    }\n                    paint.all(maze, canvas, state);\n                },\n                type: 'click'\n            },\n\n            // To ensure elements exist with these ids.\n            'maze-fluctuate-text-color-checked': {},\n            'maze-fluctuate-text-color-unchecked': {},\n\n            // Toggle showing/hiding maze solution.\n            'maze-show-solution-ctrl': {\n                init: function() {\n                    view.updateShowingSolutionCtrl(state);\n                },\n                action: function(evt) {\n                    state.currentlyShowingSolution = !state.currentlyShowingSolution;\n                    view.updateShowingSolutionCtrl(state);\n\n                    solve.reset(maze, state);\n                    paint.all(maze, canvas, state);\n\n                    view.enableCtrlById('maze-solve-start-ctrl');\n                    view.disableCtrlById('maze-solve-pause-ctrl');\n                    view.disableCtrlById('maze-solve-reset-ctrl');\n\n                    evt.stopPropagation();\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // To ensure elements exist with these ids.\n            'maze-show-solution-label': {},\n            'maze-hide-solution-label': {},\n\n            'maze-color-solution-random': {\n                action: function() {\n                    colorSolution(maze, canvas, state, webColors.randomBrightWebColor());\n                },\n                type: 'click'\n            },\n\n            'maze-color-solution-default': {\n                init: function() {\n                    // No need to have two ways to color the solution black.\n                    if (state.colors.solutionDefault === 'black') {\n                       view.hideControlById('maze-color-solution-default');\n                    }\n                },\n                action: function() {\n                    colorSolution(maze, canvas, state, state.colors.solutionDefault);\n                },\n                type: 'click'\n            },\n\n            'maze-color-solution-black': {\n                action: function() {\n                    colorSolution(maze, canvas, state, 'black');\n                },\n                type: 'click'\n            },\n\n            'maze-fluctuate-solution-color': {\n                init: function() {\n                    view.updateFluctuateSolutionColorCtrl(state);\n                },\n                action: function() {\n                    state.colors.fluctuateSolutionColor = !state.colors.fluctuateSolutionColor;\n                    view.updateFluctuateSolutionColorCtrl(state);\n                    if (state.colors.fluctuateSolutionColor && !state.currentlyShowingSolution) {\n                        view.toggleShowingSolution();\n                    }\n                    paint.all(maze, canvas, state);\n                },\n                type: 'click'\n            },\n\n            // To ensure elements exist with these ids.\n            'maze-fluctuate-solution-color-checked': {},\n            'maze-fluctuate-solution-color-unchecked': {},\n\n            // Start solve animation.\n            'maze-solve-start-ctrl': {\n                action: function(evt) {\n                    if (state.currentlyShowingText) {\n                        view.toggleShowingText();\n                    }\n                    if (state.currentlyShowingSolution) {\n                        view.toggleShowingSolution();\n                    }\n\n                    solve.start(maze, canvas, state, endOfMazeCtrlsUpdate);\n\n                    view.disableCtrlById('maze-solve-start-ctrl');\n                    view.enableCtrlById('maze-solve-pause-ctrl');\n                    view.enableCtrlById('maze-solve-reset-ctrl');\n\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Pause solve animation.\n            'maze-solve-pause-ctrl': {\n                init: function() {\n                    view.disableCtrlById('maze-solve-pause-ctrl');\n                },\n                action: function(evt) {\n                    solve.pause(state);\n\n                    view.enableCtrlById('maze-solve-start-ctrl');\n                    view.disableCtrlById('maze-solve-pause-ctrl');\n\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Reset solve animation.\n            'maze-solve-reset-ctrl': {\n                init: function() {\n                    view.disableCtrlById('maze-solve-reset-ctrl');\n                },\n                action: function(evt) {\n                    solve.reset(maze, state);\n\n                    view.enableCtrlById('maze-solve-start-ctrl');\n                    view.disableCtrlById('maze-solve-pause-ctrl');\n                    view.disableCtrlById('maze-solve-reset-ctrl');\n\n                    paint.all(maze, canvas, state);\n\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Decrease solve animation speed.\n            'maze-decrease-speed-ctrl': {\n                action: function(evt) {\n                    adjustSpeed(maze, canvas, state, ctrls, state.solve.speed - 1, state.solve.speed);\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Increase solve animation speed.\n            'maze-increase-speed-ctrl': {\n                init: function() {\n                    view.injectSpeedMeter(state);\n                    view.updateSpeedMeter(state, state.solve.speed, null);\n                },\n                action: function(evt) {\n                    adjustSpeed(maze, canvas, state, ctrls, state.solve.speed + 1, state.solve.speed);\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Decrease size of paths in maze.\n            'maze-decrease-size-ctrl': {\n                action: function(evt) {\n                    var size = state.locationSize - 1;\n\n                    if (size >= utils.minLocationSize && size <= utils.maxLocationSize(state)) {\n                        load.setLocationSize(state, size);\n                        maze = rebuild(maze, canvas, state);\n                        view.updateSizeCtrls(state);\n                    }\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Increase size of paths in maze.\n            'maze-increase-size-ctrl': {\n                action: function(evt) {\n                    var size = state.locationSize + 1;\n\n                    if (size >= utils.minLocationSize && size <= utils.maxLocationSize(state)) {\n                        load.setLocationSize(state, size);\n                        maze = rebuild(maze, canvas, state);\n                        view.updateSizeCtrls(state);\n                    }\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Fit maze to screen.\n            'maze-auto-size-ctrl': {\n                init: function() {\n                    view.disableCtrlById('maze-auto-size-ctrl');\n                },\n                action: function(evt) {\n                    if (state.locationSize != state.autoFittedLocationSize) {\n                        load.autoSetLocationSize(state);\n                        maze = rebuild(maze, canvas, state);\n                        view.updateSizeCtrls(state);\n                    }\n\n                    stopDefault(evt);\n                },\n                type: 'click'\n            },\n\n            // Rebuild the maze with user supplied text.\n            'maze-text-input-ctrl': {\n                init: function() {\n                    var input = document.getElementById('maze-text-input-ctrl');\n                    var reset = document.getElementById('maze-reset-ctrl');\n\n                    input.oninput = function() {\n\n                        // Enable the reset button even for blacklisted text.\n                        if (input.value !== state.originalText) {\n                            view.enableCtrlById('maze-reset-ctrl');\n                        }\n                        else {\n                            view.disableCtrlById('maze-reset-ctrl');\n                        }\n\n                        // Clean the text with CharMaps whitelist function.\n                        var text = CharMaps.cleanText(input.value);\n\n                        // Clear the previous timeout, if there was one, because more\n                        // input has arrived.\n                        clearTimeout(state.textChangeRebuildTimeout);\n\n                        // Use timeouts so each keystroke doesn't start an expensive rebuild.\n                        if (text) {\n                            state.textChangeRebuildTimeout = setTimeout(function() {\n                                state.text = input.value;\n                                load.autoSetLocationSize(state);\n                                maze = rebuild(maze, canvas, state);\n                                view.updateSizeCtrls(state);\n                            }, 300);\n                        }\n                    };\n\n                    input.onpropertychange = input.oninput;\n\n                    addListener('keypress', input, function(evt) {\n                        if (evt.keyCode == 13) {\n                            stopDefault(evt);\n                        }\n                    });\n                }\n            },\n\n            // Reset to original text.\n            'maze-reset-ctrl': {\n                init: function() {\n                    view.disableCtrlById('maze-reset-ctrl');\n                },\n                action: function(evt) {\n                    state.text = state.originalText;\n                    load.autoSetLocationSize(state);\n                    maze = rebuild(maze, canvas, state);\n\n                    view.clearTextInput();\n                    view.updateSizeCtrls(state);\n                    view.disableCtrlById('maze-reset-ctrl');\n\n                    stopDefault(evt);\n                },\n                type: 'click'\n            }\n        };\n\n        var id, e, c;\n\n        // Ensure control elements are present.\n        for (id in ctrls) {\n            if (!document.getElementById(id)) {\n                throw new Error(\"No element found with id '\" + id + \"'\");\n            }\n        }\n\n        // Initialize control with init function.\n        for (id in ctrls) {\n            e = document.getElementById(id);\n            if (e) {\n                c = ctrls[id];\n                if (c.hasOwnProperty('init')) {\n                    c.init();\n                }\n            }\n        }\n\n        // Register listeners for controls.\n        for (id in ctrls) {\n            e = document.getElementById(id);\n            c = ctrls[id];\n\n            if (c.hasOwnProperty('action') && c.hasOwnProperty('type')) {\n                addListener(c.type, e, c.action.bind(ctrls));\n            }\n            else if (c.hasOwnProperty('action')) {\n                c.action.bind(ctrls)();\n            }\n        }\n\n        // Add window resize listener to rebuild when window size changes.\n        addListener('resize', window, function(evt) {\n            clearTimeout(state.screenChangeRebuildTimeout);\n\n            state.screenChangeRebuildTimeout = setTimeout(function() {\n                load.autoSetLocationSize(state);\n                maze = rebuild(maze, canvas, state);\n                view.updateSizeCtrls(state);\n                mainView.setMazeTopMargin(state.mazeMargin);\n            }, 300);\n\n            stopDefault(evt);\n        });\n\n        view.configureBootstrapDropdowns(addListener);\n    }\n};\n\nfunction colorText(maze, canvas, state, color) {\n    if (!state.currentlyShowingText) {\n        view.toggleShowingText();\n    }\n    state.colors.text = color;\n    paint.all(maze, canvas, state);\n}\n\nfunction colorSolution(maze, canvas, state, color) {\n    if (!state.currentlyShowingSolution) {\n        view.toggleShowingSolution();\n    }\n    state.colors.solution = color;\n    paint.all(maze, canvas, state);\n}\n\nfunction adjustSpeed(maze, canvas, state, ctrls, speed, prevSpeed) {\n    var continueRunning = false;\n\n    if (state.solve.running) {\n        solve.pause(state);\n        continueRunning = true;\n    }\n\n    if (speed >= 1 && speed <= state.solve.animationDelays.length) {\n        state.solve.speed = speed;\n        view.updateSpeedCtrls(state);\n        view.updateSpeedMeter(state, speed, prevSpeed);\n    }\n\n    if (continueRunning) {\n        solve.start(maze, canvas, state, endOfMazeCtrlsUpdate);\n    }\n}\n\n// A callback for the solve module to use to update the solve controls\n// when the animation reaches the end of the maze.\nfunction endOfMazeCtrlsUpdate() {\n    view.enableCtrlById('maze-solve-start-ctrl');\n    view.disableCtrlById('maze-solve-pause-ctrl');\n    view.disableCtrlById('maze-solve-reset-ctrl');\n}\n\n// Rebuild the maze from scratch.\nfunction rebuild(maze, canvas, state) {\n    solve.reset(maze, state);\n\n    view.enableCtrlById('maze-solve-start-ctrl');\n    view.disableCtrlById('maze-solve-pause-ctrl');\n    view.disableCtrlById('maze-solve-reset-ctrl');\n\n    maze = build(state);\n    load.canvas(maze, state);\n    paint.all(maze, canvas, state);\n\n    return maze;\n}\n\n// IE compatible prevent default.\nfunction stopDefault(evt) {\n    if (evt.preventDefault) {\n        evt.preventDefault();\n    }\n    else {\n        evt.returnValue = false;\n    }\n}\n\n// Use IE event listeners instead, when required.\nfunction addListener(type, elem, func) {\n    if (elem.addEventListener) {\n        elem.addEventListener(type, func, false);\n    }\n    else {\n        elem.attachEvent('on' + type, func);\n    }\n}\n","'use strict';\n\nvar utils = require('../utils');\n\n// Utilities allowing the solve module to update relevant controls.\nmodule.exports = {\n\n    hideControlById: function(id) {\n        document.getElementById(id).style.display = 'none';\n    },\n\n    disableCtrlById: function(id) {\n        var ctrl = document.getElementById(id);\n\n        ctrl.setAttribute('disabled', 'disabled');\n\n        // Add disabled class and clean up spaces.\n        if (!ctrl.className.match(/disabled/)) {\n            ctrl.className = (ctrl.className + ' disabled').replace(/(^\\s+|\\s+$)/, '');\n        }\n    },\n\n    enableCtrlById: function(id) {\n        var ctrl = document.getElementById(id);\n\n        ctrl.removeAttribute('disabled');\n\n        if (ctrl.className.match(/disabled/)) {\n            // Remove disabled and needless spaces.\n            ctrl.className = ctrl.className.replace(/disabled/, '').replace(/\\s{2,}/, ' ').replace(/(^\\s+|\\s+$)/, '');\n        }\n    },\n\n    updateShowingTextCtrl: function(state) {\n        if (state.currentlyShowingText) {\n            document.getElementById('maze-show-text-label').style.display = 'none';\n            document.getElementById('maze-hide-text-label').style.display = 'inline';\n        }\n        else {\n            document.getElementById('maze-show-text-label').style.display = 'inline';\n            document.getElementById('maze-hide-text-label').style.display = 'none';\n        }\n    },\n\n    updateShowingSolutionCtrl: function(state) {\n        if (state.currentlyShowingSolution) {\n            document.getElementById('maze-show-solution-label').style.display = 'none';\n            document.getElementById('maze-hide-solution-label').style.display = 'inline';\n        }\n        else {\n            document.getElementById('maze-show-solution-label').style.display = 'inline';\n            document.getElementById('maze-hide-solution-label').style.display = 'none';\n        }\n    },\n\n    updateFluctuateTextColorCtrl: function(state) {\n        if (state.colors.fluctuateTextColor) {\n            document.getElementById('maze-fluctuate-text-color-checked').style.display = 'inherit';\n            document.getElementById('maze-fluctuate-text-color-unchecked').style.display = 'none';\n        }\n        else {\n            document.getElementById('maze-fluctuate-text-color-checked').style.display = 'none';\n            document.getElementById('maze-fluctuate-text-color-unchecked').style.display = 'inherit';\n        }\n    },\n\n    updateFluctuateSolutionColorCtrl: function(state) {\n        if (state.colors.fluctuateSolutionColor) {\n            document.getElementById('maze-fluctuate-solution-color-checked').style.display = 'inherit';\n            document.getElementById('maze-fluctuate-solution-color-unchecked').style.display = 'none';\n        }\n        else {\n            document.getElementById('maze-fluctuate-solution-color-checked').style.display = 'none';\n            document.getElementById('maze-fluctuate-solution-color-unchecked').style.display = 'inherit';\n        }\n    },\n\n    toggleShowingText: function() {\n        document.getElementById('maze-show-text-ctrl').click();\n    },\n\n    toggleShowingSolution: function() {\n        document.getElementById('maze-show-solution-ctrl').click();\n    },\n\n    clearTextInput: function() {\n        document.getElementById('maze-text-input-ctrl').value = '';\n    },\n\n    updateSpeedCtrls: function(state) {\n        switch (state.solve.speed) {\n            case 1:\n                this.disableCtrlById('maze-decrease-speed-ctrl');\n                this.enableCtrlById('maze-increase-speed-ctrl');\n                break;\n            case state.solve.animationDelays.length:\n                this.enableCtrlById('maze-decrease-speed-ctrl');\n                this.disableCtrlById('maze-increase-speed-ctrl');\n                break;\n            default:\n                this.enableCtrlById('maze-decrease-speed-ctrl');\n                this.enableCtrlById('maze-increase-speed-ctrl');\n        }\n    },\n\n    // Works with bootstrap in btn-group.\n    injectSpeedMeter: function(state) {\n        var i, newNode, parentNode, childNode;\n\n        if (state.useSpeedMeter) {\n            childNode = document.getElementById('maze-increase-speed-ctrl');\n\n            if (childNode) {\n                for (i = 0; i < state.solve.animationDelays.length; i++) {\n                    newNode = document.createElement('div');\n                    newNode.id = 'maze-meter-' + (i + 1);\n                    newNode.className = 'maze-meter btn btn-default';\n                    newNode.setAttribute('disabled', 'disabled');\n                    newNode.innerHTML = '&nbsp;';\n                    childNode.parentNode.insertBefore(newNode, childNode);\n                }\n            }\n        }\n    },\n\n    // @param prevSpeed: (optional) The previous speed, so that that location in the meter\n    // can be uncolored.\n    updateSpeedMeter: function(state, speed, prevSpeed) {\n        if (state.useSpeedMeter) {\n            document.getElementById('maze-meter-' + speed).style.backgroundColor = 'black';\n\n            if (prevSpeed) {\n                document.getElementById('maze-meter-' + prevSpeed).style.backgroundColor = 'white';\n            }\n        }\n    },\n\n    updateSizeCtrls: function(state) {\n        if (state.locationSize === utils.minLocationSize) {\n            this.disableCtrlById('maze-decrease-size-ctrl');\n        }\n        else {\n            this.enableCtrlById('maze-decrease-size-ctrl');\n        }\n\n        if (state.locationSize === utils.maxLocationSize(state)) {\n            this.disableCtrlById('maze-increase-size-ctrl');\n        }\n        else {\n            this.enableCtrlById('maze-increase-size-ctrl');\n        }\n\n        if (state.locationSize === state.autoFittedLocationSize) {\n            this.disableCtrlById('maze-auto-size-ctrl');\n        }\n        else {\n            this.enableCtrlById('maze-auto-size-ctrl');\n        }\n    },\n\n    // Stop bootstrap dropdowns from closing automatically.\n    configureBootstrapDropdowns: function(addListener) {\n        var i, dropdowns = document.getElementsByClassName('dropdown-menu');\n\n        if (dropdowns.length) {\n            for (i = 0; i < dropdowns.length; i++) {\n                addListener('click', dropdowns[i], function(evt) {\n                    evt.stopPropagation();\n                });\n            }\n        }\n    }\n};\n","'use strict';\n\n// Polyfill some ES6 features.\nrequire('./polyfill');\n\nvar load     = require('./load');\nvar build    = require('./build/index');\nvar paint    = require('./paint');\nvar controls = require('./controls');\nvar view     = require('./view');\n\nmodule.exports = {\n\n    init: function(text, opts) {\n\n        this.state  = load.state(text, opts);\n\n        this.maze   = build(this.state);\n\n        this.canvas = load.canvas(this.maze, this.state);\n\n        controls.init(this.maze, this.canvas, this.state);\n\n        view.setMazeTopMargin(this.state.mazeMargin);\n\n        paint.all(this.maze, this.canvas, this.state);\n    }\n};\n","'use strict';\n\nvar utils              = require('../utils');\nvar breakTextIntoLines = require('../build/break-text-into-lines');\nvar CharMaps           = require('../build/CharacterMaps');\n\n// Set locationSize and maxMazeWidth to best fit the screen.\nmodule.exports = function(state, getMaxMazeWidthCallback) {\n\n    // Begin with the smallest location size, then test while increasing it.\n    var locationSize = utils.minLocationSize;\n\n    // Static max height.\n    var maxMazeHeight = getMaxMazeHeight(state);\n\n    var maxMazeWidth  = getMaxMazeWidthCallback(state.mazeMargin, locationSize);\n    var lines = breakTextIntoLines(state.text, maxMazeWidth, locationSize);\n\n    while (computeMazeHeight(lines, locationSize) <= maxMazeHeight) {\n        locationSize++;\n\n        maxMazeWidth = getMaxMazeWidthCallback(state.mazeMargin, locationSize);\n        lines = breakTextIntoLines(state.text, maxMazeWidth, locationSize);\n    }\n\n    // Location size is too big when the loop ends, so decrement it.\n    state.locationSize = locationSize > utils.minLocationSize ? locationSize - 1 : locationSize;\n\n    state.autoFittedLocationSize = state.locationSize;\n\n    state.maxMazeWidth = getMaxMazeWidthCallback(state.mazeMargin, state.locationSize);\n};\n\n// Returns the max height, which depends on the screen height and the margin size.\nfunction getMaxMazeHeight(state) {\n    var windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var mazeMenu     = document.getElementById('maze-menu');\n\n    // Subtract the maze menu's height.\n    if (mazeMenu) {\n        return (windowHeight - mazeMenu.clientHeight) * (1 - state.mazeMargin * 2);\n    }\n    return windowHeight * (1 - state.mazeMargin * 2);\n}\n\n// Returns the height the maze will be in pixels given the number of lines\n// of text in the maze and the location size.\nfunction computeMazeHeight(lines, locationSize) {\n    var charHgt = CharMaps.getCharHeight();\n\n    return locationSize * (charHgt * lines.length + lines.length + 1);\n}\n","'use strict';\n\nvar utils     = require('../utils');\nvar webColors = require('../paint/web-colors');\nvar autoSize  = require('./auto-size');\n\n// Load maze state/options, and the canvas context for maze rendering.\nmodule.exports = {\n\n    // Get the app's main state object with default and optionally-configured values.\n    state: function(opts) {\n        var state = loadOptions(getDefaults(), opts);\n\n        autoSize(state, getMaxMazeWidth);\n\n        return Object.seal(state);\n    },\n\n    // Initialize the html canvas.\n    canvas: function(maze, state) {\n        return loadCanvas(maze, state);\n    },\n\n    // Helper for loading state before rebuilding the maze with a different location size.\n    setLocationSize: function(state, locationSize) {\n        state.locationSize = locationSize;\n        state.maxMazeWidth = getMaxMazeWidth(state.mazeMargin, state.locationSize);\n    },\n\n    // Helper for loading state before rebuilding the maze with a different location size.\n    autoSetLocationSize: function(state) {\n        autoSize(state, getMaxMazeWidth);\n    }\n};\n\nfunction getDefaults() {\n    return {\n        text:         'Hope means hoping when things are hopeless, or it is no virtue at all. G.K.C.',\n        originalText: 'Hope means hoping when things are hopeless, or it is no virtue at all. G.K.C.',\n        currentlyShowingText: true,\n\n        currentlyShowingSolution: true,\n\n        // Speed meter is designed to be rendered in a bootstrap css btn-group class.\n        useSpeedMeter: false,\n\n        // Minimum margin rendered between screen edges and the maze.\n        mazeMargin: 0.1,\n\n        // Timeouts to keep from immediately rebuilding on text change or screen resize.\n        textChangeRebuildTimeout: null,\n        screenChangeRebuildTimeout: null,\n\n        // Size parameters set by the auto-size module.\n        locationSize: null,\n        autoFittedLocationSize: null,\n        maxMazeWidth: null,\n\n        // Maze start and end.\n        endpoints: {\n            start: {\n                'x': null,\n                'y': null\n            },\n            end: {\n                'x': null,\n                'y': null\n            }\n        },\n\n        // Rendering/painting colors.\n        colors: {\n            text:                   'black',\n            textDefault:            'black',\n            solution:               'chartreuse',\n            solutionDefault:        'chartreuse',\n            backtracked:            'lightgray',\n            unvisited:              'white',\n            randomizeTextColor:     false,\n            fluctuateTextColor:     false,\n            randomizeSolutionColor: false,\n            fluctuateSolutionColor: false,\n        },\n\n        // State used to show the solution and auto-solve the maze.\n        solve: {\n            running:         false,\n\n            // Locations in the maze while solving.\n            prev:            null,\n            curr:            { 'x': null, 'y': null },\n            stack:           [],\n\n            // Interval timing parameters for animating finding the maze solution.\n            interval:        null,\n            delay:           40,\n            animationDelays: [640, 320, 160, 80, 40, 20, 10, 5, 0],\n            get speed() {\n                // The speed is one more than the index of the current animation delay.\n                return this.animationDelays.indexOf(this.delay) + 1;\n            },\n            set speed(spd) {\n                if (spd < 1 || spd > this.animationDelays.length) {\n                    throw new Error('Invalid solve speed: ' + spd);\n                }\n                this.delay = this.animationDelays[spd - 1];\n            }\n        }\n    };\n}\n\n// Load optional user-defined configuration.\nfunction loadOptions(state, opts) {\n    var o, co;\n\n    if (opts && typeof opts !== 'object') {\n        throw new Error(\"Maze init requires an 'opts' object\");\n    }\n\n    for (o in opts) {\n        if (opts.hasOwnProperty(o)) {\n            switch (o) {\n\n                // Text option must be a string.\n                case 'text':\n                    if (typeof opts.text === 'string' && opts.text.length > 0) {\n                        state[o] = opts[o];\n                        state.originalText = opts.text;\n                    }\n                    else {\n                        throw new Error(\"Maze option '\" + o + \"' must be a non-zero-length string\");\n                    }\n                    break;\n\n                // Options that must be a boolean.\n                case 'currentlyShowingText':\n                case 'useSpeedMeter':\n                    if (typeof opts[o] === 'boolean') {\n                        state[o] = opts[o];\n                    }\n                    else {\n                        throw new Error(\"Maze option '\" + o + \"' must be a boolean\");\n                    }\n                    break;\n\n                // Color options that must be a boolean.\n                case 'fluctuateTextColor':\n                case 'randomizeTextColor':\n                case 'fluctuateSolutionColor':\n                case 'randomizeSolutionColor':\n                    if (typeof opts[o] === 'boolean') {\n                        state.colors[o] = opts[o];\n                    }\n                    else {\n                        throw new Error(\"Maze option '\" + o + \"' must be a boolean\");\n                    }\n                    break;\n\n                // Optional colors must be web colors.\n                case 'textColor':\n                case 'solutionColor':\n                    if (webColors.hsl(opts[o])) {\n                        if (o === 'textColor') {\n                            state.colors.text        = opts[o];\n                            state.colors.textDefault = opts[o];\n                        }\n                        else {\n                            state.colors.solution        = opts[o];\n                            state.colors.solutionDefault = opts[o];\n                        }\n                    }\n                    else {\n                        throw new Error(\"Invalid value '\" + opts[o] + \"' for maze color option '\" + o + \"' (must be a web color name)\");\n                    }\n                    break;\n\n                default:\n                    throw new Error(\"Unknown maze option: '\" + o + \"'\");\n            }\n        }\n    }\n\n    return state;\n}\n\n// Sets the canvas element's size and gets its context for rendering the maze.\nfunction loadCanvas(maze, state) {\n    var i, longest = 0;\n\n    var canvas = document.getElementById('text-maze');\n\n    if (!canvas) {\n        throw Error(\"Cannot find a canvas tag with id of 'text-maze'\");\n    }\n\n    if (!canvas.getContext) {\n        throw Error(\"Canvas getContext property does not exist\");\n    }\n\n    // Find the longest row in the maze.\n    for (i = 0; i < maze.length; i++) {\n        if (maze[i].length > longest) {\n            longest = maze[i].length;\n        }\n    }\n\n    canvas.width  = longest * state.locationSize;\n    canvas.height = maze.length * state.locationSize;\n\n    return canvas.getContext('2d');\n}\n\n// Returns the maximum width the maze can be based on the screen size and maze margin.\nfunction getMaxMazeWidth(mazeMargin, locationSize) {\n    var windowWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var max         = windowWidth * (1 - mazeMargin * 2);\n\n    // The max width must be a multiple of the maze location size.\n    return max - (max % locationSize);\n}\n","'use strict';\n\nvar utils     = require('../utils');\nvar webColors = require('./web-colors');\n\n// Paint a single location or all locations in the maze.\nmodule.exports = {\n\n    // Paint the entire maze.\n    all: function(maze, canvas, state) {\n        var x, y;\n\n        var width  = state.maxMazeWidth * state.locationSize;\n        var height = maze.length  * state.locationSize;\n\n        // White-wash the canvas.\n        paint(canvas, state.colors.unvisited, 0, 0, width, height);\n\n        for (y = 0; y < maze.length; y++) {\n            for (x = 0; x < maze[y].length; x++) {\n                // Paint one location.\n                this.one(maze, canvas, state, x, y);\n            }\n        }\n    },\n\n    // Paint a single location in the maze.\n    one: function(maze, canvas, state, x, y) {\n        var colors = state.colors;\n        var ls     = state.locationSize;\n        var clr, fluctuate;\n\n        // Half border: half the width of the maze's borders.\n        var hb = 1;\n\n        // Old half border: changed based on location size.\n        // var hb = Math.floor(ls / 6) || 1;\n\n        // Text margin: margin between the text and borders.\n        var tm = ls < 10 ? 0 : Math.floor(ls / 5) - 1;\n\n        if (onPath(maze, x, y)) {\n\n            clr = 'black';\n\n            // Paint borders: top/right/bottom/left.\n            if (!onPath(maze, x, y-1)) {\n                paint(canvas, clr, x*ls-hb, y*ls-hb, ls+2*hb, 2*hb);\n            }\n            if (!onPath(maze, x+1, y)) {\n                paint(canvas, clr, x*ls+ls-hb, y*ls-hb, 2*hb, ls+2*hb);\n            }\n            if (!onPath(maze, x, y+1)) {\n                paint(canvas, clr, x*ls-hb, y*ls+ls-hb, ls+2*hb, 2*hb);\n            }\n            if (!onPath(maze, x-1, y)) {\n                paint(canvas, clr, x*ls-hb, y*ls-hb, 2*hb, ls+2*hb);\n            }\n\n            if (state.solve.running) {\n                // Paint background, solve, and backtrack lines: top/right/bottom/left/middle.\n                if (onPath(maze, x, y-1)) {\n                    clr = getConnectingColor(maze, colors, x, y-1, maze[y][x].color);\n                    clr = fluctuateColor(clr, colors);\n                    paint(canvas, clr, x*ls+hb+tm, y*ls, ls-2*hb-2*tm, hb+tm);\n                }\n                if (onPath(maze, x+1, y)) {\n                    clr = getConnectingColor(maze, colors, x+1, y, maze[y][x].color);\n                    clr = fluctuateColor(clr, colors);\n                    paint(canvas, clr, x*ls+ls-hb-tm, y*ls+hb+tm, hb+tm, ls-2*hb-2*tm);\n                }\n                if (onPath(maze, x, y+1)) {\n                    clr = getConnectingColor(maze, colors, x, y+1, maze[y][x].color);\n                    clr = fluctuateColor(clr, colors);\n                    paint(canvas, clr, x*ls+hb+tm, y*ls+ls-hb-tm, ls-2*hb-2*tm, hb+tm);\n                }\n                if (onPath(maze, x-1, y)) {\n                    clr = getConnectingColor(maze, colors, x-1, y, maze[y][x].color);\n                    clr = fluctuateColor(clr, colors);\n                    paint(canvas, clr, x*ls, y*ls+hb+tm, hb+tm, ls-2*hb-2*tm);\n                }\n                clr = maze[y][x].color;\n                clr = fluctuateColor(clr, colors);\n                paint(canvas, clr, x*ls+hb+tm, y*ls+hb+tm, ls-2*hb-2*tm, ls-2*hb-2*tm);\n            }\n\n            else {\n                // Paint the solution: top/right/bottom/left/middle.\n                if (state.currentlyShowingSolution && isKey(maze, x, y)) {\n                    fluctuate = colors.fluctuateSolutionColor;\n\n                    if (isKey(maze, x, y-1)) {\n                        clr = fluctuate ? fluctuateColor(colors.solution, colors) : colors.solution;\n                        paint(canvas, clr, x*ls+hb+tm, y*ls, ls-2*hb-2*tm, hb+tm);\n                    }\n                    if (isKey(maze, x+1, y)) {\n                        clr = fluctuate ? fluctuateColor(colors.solution, colors) : colors.solution;\n                        paint(canvas, clr, x*ls+ls-hb-tm, y*ls+hb+tm, hb+tm, ls-2*hb-2*tm);\n                    }\n                    if (isKey(maze, x, y+1)) {\n                        clr = fluctuate ? fluctuateColor(colors.solution, colors) : colors.solution;\n                        paint(canvas, clr, x*ls+hb+tm, y*ls+ls-hb-tm, ls-2*hb-2*tm, hb+tm);\n                    }\n                    if (isKey(maze, x-1, y)) {\n                        clr = fluctuate ? fluctuateColor(colors.solution, colors) : colors.solution;\n                        paint(canvas, clr, x*ls, y*ls+hb+tm, hb+tm, ls-2*hb-2*tm);\n                    }\n                    clr = fluctuate ? fluctuateColor(colors.solution, colors) : colors.solution;\n                    paint(canvas, clr, x*ls+hb+tm, y*ls+hb+tm, ls-2*hb-2*tm, ls-2*hb-2*tm);\n                }\n\n                // Paint text: top/right/bottom/left/middle.\n                if (state.currentlyShowingText && isCharacter(maze, x, y)) {\n                    fluctuate = colors.fluctuateTextColor;\n\n                    if (isCharacter(maze, x, y-1)) {\n                        clr = fluctuate ? fluctuateColor(colors.text, colors) : colors.text;\n                        paint(canvas, clr, x*ls+hb+tm, y*ls, ls-2*hb-2*tm, hb+tm);\n                    }\n                    if (isCharacter(maze, x+1, y)) {\n                        clr = fluctuate ? fluctuateColor(colors.text, colors) : colors.text;\n                        paint(canvas, clr, x*ls+ls-hb-tm, y*ls+hb+tm, hb+tm, ls-2*hb-2*tm);\n                    }\n                    if (isCharacter(maze, x, y+1)) {\n                        clr = fluctuate ? fluctuateColor(colors.text, colors) : colors.text;\n                        paint(canvas, clr, x*ls+hb+tm, y*ls+ls-hb-tm, ls-2*hb-2*tm, hb+tm);\n                    }\n                    if (isCharacter(maze, x-1, y)) {\n                        clr = fluctuate ? fluctuateColor(colors.text, colors) : colors.text;\n                        paint(canvas, clr, x*ls, y*ls+hb+tm, hb+tm, ls-2*hb-2*tm);\n                    }\n                    clr = fluctuate ? fluctuateColor(colors.text, colors) : colors.text;\n                    paint(canvas, clr, x*ls+hb+tm, y*ls+hb+tm, ls-2*hb-2*tm, ls-2*hb-2*tm);\n                }\n            }\n\n            // Paint start and end openings.\n            clr = state.colors.unvisited;\n            paint(canvas, clr, state.endpoints.start.x*ls-hb,  state.endpoints.start.y*ls-hb, 2*hb, ls+2*hb);\n            paint(canvas, clr, state.endpoints.end.x*ls+ls-hb, state.endpoints.end.y*ls-hb,   2*hb, ls+2*hb);\n        }\n    }\n};\n\n// Returns true if the given coordinates refer to an object that\n// has the 'path' property set.\nfunction onPath(maze, x, y) {\n    return y >= 0             &&\n           y < maze.length    &&\n           x >= 0             &&\n           x < maze[y].length &&\n           maze[y][x].path;\n}\n\n// Returns true if the coordinates are onPath() and refer to an\n// object that doesn't have its 'connection' property set.\nfunction isCharacter(maze, x, y) {\n    return onPath(maze, x, y) && !maze[y][x].connection;\n}\n\nfunction isKey(maze, x, y) {\n    return y >= 0             &&\n           y < maze.length    &&\n           x >= 0             &&\n           x < maze[y].length &&\n           maze[y][x].key;\n}\n\n// Returns the color to be used when painting the area of a location\n// nearest to an adjacent location.\nfunction getConnectingColor(maze, colors, x, y, defaultColor, fluctuate) {\n    if (maze[y][x].color === colors.backtracked) {\n        return colors.backtracked;\n    }\n    else if (maze[y][x].color === colors.unvisited) {\n        return colors.unvisited;\n    }\n    return defaultColor;\n}\n\nfunction fluctuateColor(color, colors) {\n\n    // Returns a random number, in a range centered on x. When doWrap is true,\n    // the range wraps around either end of the domain when it overflows the\n    // domain. Range and domain are assumed to start at 0.\n    // @param domain: An integer signifying the domain [0, domain].\n    // @param range:  An integer divisible by 2 and < than domain.\n    // @param x:      An integer in domain [0, domain].\n    function randomInRangeInDomain(x, range, domain, doWrap) {\n        var result, min, max, rangeIdx;\n\n        min = x - range / 2;\n        max = x + range / 2;\n\n        if (min < 0 || max > domain) {\n\n            // Wrap the domain and return the random number.\n            if (doWrap) {\n                min = min < 0      ? domain + min + 1 : min;\n                max = max > domain ? max - domain - 1 : max;\n\n                result = min;\n                rangeIdx = utils.randomInRange(0, range);\n\n                while (rangeIdx > 0) {\n                    result++;\n                    if (result > domain) {\n                        result = max;\n                    }\n                    rangeIdx--;\n                }\n\n                return result;\n            }\n\n            // Just correct the overflow.\n            min = min < 0      ? 0      : min;\n            max = max > domain ? domain : max;\n        }\n\n        result = utils.randomInRange(min, max);\n\n        return result;\n    }\n\n    var h, hRange = 40, hDomain = 360;\n    var s, sRange = 20, sDomain = 100;\n    var l, lRange = 20, lDomain = 100;\n\n    // Don't fluctuate color, sometimes.\n    if (color === colors.unvisited) {\n        return webColors.hsl(color);\n    }\n\n    h = randomInRangeInDomain(webColors.hue(color),        hRange, hDomain, true);\n    s = randomInRangeInDomain(webColors.saturation(color), sRange, sDomain, false);\n    l = randomInRangeInDomain(webColors.lightness(color),  lRange, lDomain, false);\n\n    // Keep away from too white.\n    l = l > 90 ? 90 : l;\n\n    return 'hsl(' + h + ', ' + s + '%, ' + l + '%)';\n}\n\n// Paint to the canvas.\nfunction paint(canvas, color, x, y, width, height) {\n    canvas.fillStyle = color;\n    canvas.fillRect(x, y, width, height);\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nmodule.exports = {\n\n    // Return the css hsl value for color.\n    hsl: function(color) {\n        return getColor(color);\n    },\n\n    // Return the hue hsl value for color.\n    hue: function(color) {\n        color = getColor(color);\n\n        if (color) {\n            color = parseInt(color.match(/[0-9]+/g)[0]);\n        }\n        return color;\n    },\n\n    // Return the saturation hsl value for color.\n    saturation: function(color) {\n        color = getColor(color);\n\n        if (color) {\n            color = parseInt(color.match(/[0-9]+/g)[1]);\n        }\n        return color;\n    },\n\n    // Return the lightness hsl value for color.\n    lightness: function(color) {\n        color = getColor(color);\n\n        if (color) {\n            color = parseInt(color.match(/[0-9]+/g)[2]);\n        }\n        return color;\n    },\n\n    // Return a random web color name.\n    randomBrightWebColor: function() {\n        var brights = [\n            'aqua',\n            'blue',\n\t\t\t'blueviolet',\n\t\t\t'cornflowerblue',\n\t\t\t'crimson',\n\t\t\t'darkturquoise',\n\t\t\t'darkviolet',\n\t\t\t'deeppink',\n\t\t\t'deepskyblue',\n\t\t\t'dodgerblue',\n            'forestgreen',\n\t\t\t'fuchsia',\n\t\t\t'hotpink',\n\t\t\t'lightseagreen',\n\t\t\t'mediumorchid',\n\t\t\t'mediumslateblue',\n\t\t\t'mediumspringgreen',\n\t\t\t'mediumvioletred',\n\t\t\t'red',\n\t\t\t'royalblue',\n\t\t\t'violet'\n        ];\n        return brights[utils.randomInRange(0, brights.length - 1)];\n    }\n};\n\nfunction getColor(color) {\n    var colors = {\n        aliceblue: 'hsl(208, 100%, 97%)',\n        antiquewhite: 'hsl(34, 78%, 91%)',\n        aqua: 'hsl(180, 100%, 50%)',\n        aquamarine: 'hsl(160, 100%, 75%)',\n        azure: 'hsl(180, 100%, 97%)',\n        beige: 'hsl(60, 56%, 91%)',\n        bisque: 'hsl(33, 100%, 88%)',\n        black: 'hsl(0, 0%, 0%)',\n        blanchedalmond: 'hsl(36, 100%, 90%)',\n        blue: 'hsl(240, 100%, 50%)',\n        blueviolet: 'hsl(271, 76%, 53%)',\n        brown: 'hsl(0, 59%, 41%)',\n        burlywood: 'hsl(34, 57%, 70%)',\n        cadetblue: 'hsl(182, 25%, 50%)',\n        chartreuse: 'hsl(90, 100%, 50%)',\n        chocolate: 'hsl(25, 75%, 47%)',\n        coral: 'hsl(16, 100%, 66%)',\n        cornflowerblue: 'hsl(219, 79%, 66%)',\n        cornsilk: 'hsl(48, 100%, 93%)',\n        crimson: 'hsl(348, 83%, 58%)',\n        cyan: 'hsl(180, 100%, 50%)',\n        darkblue: 'hsl(240, 100%, 27%)',\n        darkcyan: 'hsl(180, 100%, 27%)',\n        darkgoldenrod: 'hsl(43, 89%, 38%)',\n        darkgray: 'hsl(0, 0%, 66%)',\n        darkgrey: 'hsl(0, 0%, 66%)',\n        darkgreen: 'hsl(120, 100%, 20%)',\n        darkkhaki: 'hsl(56, 38%, 58%)',\n        darkmagenta: 'hsl(300, 100%, 27%)',\n        darkolivegreen: 'hsl(82, 39%, 30%)',\n        darkorange: 'hsl(33, 100%, 50%)',\n        darkorchid: 'hsl(280, 61%, 50%)',\n        darkred: 'hsl(0, 100%, 27%)',\n        darksalmon: 'hsl(15, 72%, 70%)',\n        darkseagreen: 'hsl(120, 25%, 65%)',\n        darkslateblue: 'hsl(248, 39%, 39%)',\n        darkslategray: 'hsl(180, 25%, 25%)',\n        darkslategrey: 'hsl(180, 25%, 25%)',\n        darkturquoise: 'hsl(181, 100%, 41%)',\n        darkviolet: 'hsl(282, 100%, 41%)',\n        deeppink: 'hsl(328, 100%, 54%)',\n        deepskyblue: 'hsl(195, 100%, 50%)',\n        dimgray: 'hsl(0, 0%, 41%)',\n        dimgrey: 'hsl(0, 0%, 41%)',\n        dodgerblue: 'hsl(210, 100%, 56%)',\n        firebrick: 'hsl(0, 68%, 42%)',\n        floralwhite: 'hsl(40, 100%, 97%)',\n        forestgreen: 'hsl(120, 61%, 34%)',\n        fuchsia: 'hsl(300, 100%, 50%)',\n        gainsboro: 'hsl(0, 0%, 86%)',\n        ghostwhite: 'hsl(240, 100%, 99%)',\n        gold: 'hsl(51, 100%, 50%)',\n        goldenrod: 'hsl(43, 74%, 49%)',\n        gray: 'hsl(0, 0%, 50%)',\n        green: 'hsl(120, 100%, 25%)',\n        greenyellow: 'hsl(84, 100%, 59%)',\n        grey: 'hsl(0, 0%, 50%)',\n        honeydew: 'hsl(120, 100%, 97%)',\n        hotpink: 'hsl(330, 100%, 71%)',\n        indianred: 'hsl(0, 53%, 58%)',\n        indigo: 'hsl(275, 100%, 25%)',\n        ivory: 'hsl(60, 100%, 97%)',\n        khaki: 'hsl(54, 77%, 75%)',\n        lavender: 'hsl(240, 67%, 94%)',\n        lavenderblush: 'hsl(340, 100%, 97%)',\n        lawngreen: 'hsl(90, 100%, 49%)',\n        lemonchiffon: 'hsl(54, 100%, 90%)',\n        lightblue: 'hsl(195, 53%, 79%)',\n        lightcoral: 'hsl(0, 79%, 72%)',\n        lightcyan: 'hsl(180, 100%, 94%)',\n        lightgoldenrodyellow: 'hsl(60, 80%, 90%)',\n        lightgray: 'hsl(0, 0%, 83%)',\n        lightgrey: 'hsl(0, 0%, 83%)',\n        lightgreen: 'hsl(120, 73%, 75%)',\n        lightpink: 'hsl(351, 100%, 86%)',\n        lightsalmon: 'hsl(17, 100%, 74%)',\n        lightseagreen: 'hsl(177, 70%, 41%)',\n        lightskyblue: 'hsl(203, 92%, 75%)',\n        lightslategray: 'hsl(210, 14%, 53%)',\n        lightslategrey: 'hsl(210, 14%, 53%)',\n        lightsteelblue: 'hsl(214, 41%, 78%)',\n        lightyellow: 'hsl(60, 100%, 94%)',\n        lime: 'hsl(120, 100%, 50%)',\n        limegreen: 'hsl(120, 61%, 50%)',\n        linen: 'hsl(30, 67%, 94%)',\n        maroon: 'hsl(0, 100%, 25%)',\n        mediumaquamarine: 'hsl(160, 51%, 60%)',\n        mediumblue: 'hsl(240, 100%, 40%)',\n        mediumorchid: 'hsl(288, 59%, 58%)',\n        mediumpurple: 'hsl(260, 60%, 65%)',\n        mediumseagreen: 'hsl(147, 50%, 47%)',\n        mediumslateblue: 'hsl(249, 80%, 67%)',\n        mediumspringgreen: 'hsl(157, 100%, 49%)',\n        mediumturquoise: 'hsl(178, 60%, 55%)',\n        mediumvioletred: 'hsl(322, 81%, 43%)',\n        midnightblue: 'hsl(240, 64%, 27%)',\n        mintcream: 'hsl(150, 100%, 98%)',\n        mistyrose: 'hsl(6, 100%, 94%)',\n        moccasin: 'hsl(38, 100%, 85%)',\n        navajowhite: 'hsl(36, 100%, 84%)',\n        navy: 'hsl(240, 100%, 25%)',\n        oldlace: 'hsl(39, 85%, 95%)',\n        olive: 'hsl(60, 100%, 25%)',\n        olivedrab: 'hsl(80, 60%, 35%)',\n        orange: 'hsl(39, 100%, 50%)',\n        orangered: 'hsl(16, 100%, 50%)',\n        orchid: 'hsl(302, 59%, 65%)',\n        palegoldenrod: 'hsl(55, 67%, 80%)',\n        palegreen: 'hsl(120, 93%, 79%)',\n        paleturquoise: 'hsl(180, 65%, 81%)',\n        palevioletred: 'hsl(340, 60%, 65%)',\n        papayawhip: 'hsl(37, 100%, 92%)',\n        peachpuff: 'hsl(28, 100%, 86%)',\n        peru: 'hsl(30, 59%, 53%)',\n        pink: 'hsl(350, 100%, 88%)',\n        plum: 'hsl(300, 47%, 75%)',\n        powderblue: 'hsl(187, 52%, 80%)',\n        purple: 'hsl(300, 100%, 25%)',\n        red: 'hsl(0, 100%, 50%)',\n        rosybrown: 'hsl(0, 25%, 65%)',\n        royalblue: 'hsl(225, 73%, 57%)',\n        saddlebrown: 'hsl(25, 76%, 31%)',\n        salmon: 'hsl(6, 93%, 71%)',\n        sandybrown: 'hsl(28, 87%, 67%)',\n        seagreen: 'hsl(146, 50%, 36%)',\n        seashell: 'hsl(25, 100%, 97%)',\n        sienna: 'hsl(19, 56%, 40%)',\n        silver: 'hsl(0, 0%, 75%)',\n        skyblue: 'hsl(197, 71%, 73%)',\n        slateblue: 'hsl(248, 53%, 58%)',\n        slategray: 'hsl(210, 13%, 50%)',\n        slategrey: 'hsl(210, 13%, 50%)',\n        snow: 'hsl(0, 100%, 99%)',\n        springgreen: 'hsl(150, 100%, 50%)',\n        steelblue: 'hsl(207, 44%, 49%)',\n        tan: 'hsl(34, 44%, 69%)',\n        teal: 'hsl(180, 100%, 25%)',\n        thistle: 'hsl(300, 24%, 80%)',\n        tomato: 'hsl(9, 100%, 64%)',\n        turquoise: 'hsl(174, 72%, 56%)',\n        violet: 'hsl(300, 76%, 72%)',\n        wheat: 'hsl(39, 77%, 83%)',\n        white: 'hsl(0, 100%, 100%)',\n        whitesmoke: 'hsl(0, 0%, 96%)',\n        yellow: 'hsl(60, 100%, 50%)',\n        yellowgreen: 'hsl(80, 61%, 50%)'\n    };\n\n    if(color in colors) {\n        return colors[color];\n    }\n    return null;\n}\n","// Polyfill some newer features.\n(function () {\n\n    // Number.isInteger\n    // https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch2.md\n    if (!Number.isInteger) {\n        Number.isInteger = function(num) {\n            return typeof num === 'number' && num % 1 === 0;\n        };\n    }\n\n    // Array.indexOf\n    // From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function(searchElement, fromIndex) {\n            var k;\n            if (this === null) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n            var o = Object(this);\n            var len = o.length >>> 0;\n            if (len === 0) {\n                return -1;\n            }\n            var n = fromIndex | 0;\n            if (n >= len) {\n                return -1;\n            }\n            k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n            while (k < len) {\n                if (k in o && o[k] === searchElement) {\n                    return k;\n                }\n                k++;\n            }\n            return -1;\n        };\n    }\n})();\n","'use strict';\n\nvar utils        = require('./utils');\nvar paint        = require('./paint/index');\n\n// Solve the maze automagically, or just show the solution.\nmodule.exports = {\n\n    // Start the solve animation fresh or from pause state.\n    start: function(maze, canvas, state, endOfMazeCtrlsUpdateCallback) {\n        var s = state.solve;\n\n        // Start fresh if curr isn't set or curr is at the maze's end.\n        if (!s.curr.x || atEnd(maze, s.curr.x, s.curr.y)) {\n            reset(maze, state);\n\n            maze[s.curr.y][s.curr.x].visited = true;\n\n            paint.all(maze, canvas, state);\n            paintRoute(maze, canvas, state);\n        }\n\n        s.running = true;\n\n        s.interval = setInterval(function() {\n            if (atEnd(maze, s.curr.x, s.curr.y)) {\n                stop(state);\n\n                // Call back to update the controls.\n                endOfMazeCtrlsUpdateCallback();\n            }\n            else {\n                exploreNextLocation(maze, canvas, state);\n            }\n        }.bind(this), s.delay);\n    },\n\n    // Pause the solve animation.\n    pause: function(state) {\n        stop(state);\n    },\n\n    // Reset the solve animation.\n    reset: function(maze, state) {\n        reset(maze, state);\n    },\n\n    // Set the solution to the maze. Sets the property 'key' at every location\n    // in the maze that lies on the solution path. Call this once after\n    // building a maze.\n    setSolution: function(maze, state) {\n        var s = state.solve, next;\n\n        reset(maze, state);\n\n        maze[s.curr.y][s.curr.x].visited = true;\n        maze[s.curr.y][s.curr.x].key     = true;\n        maze[s.curr.y][s.curr.x].color   = state.colors.solution;\n\n        while (!atEnd(maze, s.curr.x, s.curr.y)) {\n            next = getNextLocation(maze, s.curr.x, s.curr.y);\n\n            // If an unvisited location was found.\n            if (next) {\n                s.stack.push(s.curr);\n                s.prev = s.curr;\n                s.curr = next;\n\n                maze[s.curr.y][s.curr.x].visited = true;\n                maze[s.curr.y][s.curr.x].key     = true;\n                maze[s.curr.y][s.curr.x].color   = state.colors.solution;\n            }\n\n            // Dead end, so backtrack.\n            else {\n                maze[s.curr.y][s.curr.x].key   = false;\n                maze[s.curr.y][s.curr.x].color = state.colors.unvisited;\n\n                s.prev = s.curr;\n                s.curr = s.stack.pop();\n            }\n        }\n    }\n};\n\n// Reset the solve state.\nfunction reset(maze, state) {\n    var x, y;\n\n    var s  = state.solve;\n    var ep = state.endpoints;\n\n    stop(state);\n\n    s.stack.length = 0;\n    s.prev = null;\n    s.curr = {\n        'x': ep.start.x,\n        'y': ep.start.y\n    };\n\n    for (y = 0; y < maze.length; y++) {\n        for (x = 0; x < maze[y].length; x++) {\n\n            maze[y][x].visited  = false;\n            maze[y][x].solution = false;\n            maze[y][x].color    = state.colors.unvisited;\n        }\n    }\n}\n\n// Used to stop at maze's end or to pause.\nfunction stop(state) {\n    clearInterval(state.solve.interval);\n    state.solve.interval = null;\n    state.solve.running = false;\n}\n\n// Returns true if the coordinates give the maze's end.\nfunction atEnd(maze, x, y) {\n    return 'end' in maze[y][x] && maze[y][x].end;\n}\n\n// Move to the next unvisited location, or backtrack, until the\n// final location is found.\nfunction exploreNextLocation(maze, canvas, state) {\n    var s = state.solve;\n    var next = getNextLocation(maze, s.curr.x, s.curr.y);\n\n    // An unvisited location was found.\n    if (next) {\n        s.stack.push(s.curr);\n        s.prev = s.curr;\n        s.curr = next;\n        maze[s.curr.y][s.curr.x].visited = true;\n    }\n\n    // Need to backtrack.\n    else {\n        s.prev = s.curr;\n        s.curr = s.stack.pop();\n    }\n\n    paintRoute(maze, canvas, state);\n}\n\n// Look for an unvisited path in all four directions. Return the\n// coordinates of the first one found, or null if all visited.\nfunction getNextLocation(maze, x, y) {\n    var i, loc;\n\n    var nextLocOpts = [\n        { 'x': x-1, 'y': y   },\n        { 'x': x,   'y': y+1 },\n        { 'x': x+1, 'y': y   },\n        { 'x': x,   'y': y-1 }\n    ];\n\n    // // Solve the maze randomly.\n    // utils.shuffleArrayInPlace(nextLocOpts);\n\n    for (i = 0; i < nextLocOpts.length; i++) {\n        loc = nextLocOpts[i];\n\n        if (typeof maze[loc.y] !== 'undefined' && typeof maze[loc.y][loc.x] !== 'undefined') {\n            if (maze[loc.y][loc.x].path && !maze[loc.y][loc.x].visited) {\n                return loc;\n            }\n        }\n    }\n\n    return null;\n}\n\n// Paint the current and previous location.\nfunction paintRoute(maze, canvas, state) {\n    var s = state.solve;\n\n    if (s.prev) {\n\n        // Currently backtracking so color the previous location to\n        // indicate that it's not on the solution path.\n        if (maze[s.curr.y][s.curr.x].solution) {\n            maze[s.prev.y][s.prev.x].solution = false;\n            maze[s.prev.y][s.prev.x].color = state.colors.backtracked;\n        }\n\n        // Not currently backtracking so color the previous location\n        // to indicate that it's assumed to be on the solution path.\n        else {\n            maze[s.prev.y][s.prev.x].solution = true;\n            maze[s.prev.y][s.prev.x].color = state.colors.solution;\n        }\n    }\n\n    maze[s.curr.y][s.curr.x].color = state.colors.solution;\n\n    if (s.prev) {\n        paint.one(maze, canvas, state, s.prev.x, s.prev.y);\n    }\n    paint.one(maze, canvas, state, s.curr.x, s.curr.y);\n}\n","'use strict';\n\nmodule.exports = {\n\n    // The smallest size the maze is renderable is three pixels: a path\n    // between two lines.\n    minLocationSize: 3,\n\n    // TODO A better vertical character connection algorithm so this hack isn't necessary.\n    maxLocationSize: function(state) {\n        return state.autoFittedLocationSize + 10;\n    },\n\n    // Shuffles the contents of an array in place.\n    shuffleArrayInPlace: function(arr) {\n        var i, rnd, tmp;\n\n        for (i = arr.length; i; i--) {\n\n            rnd = Math.floor(Math.random() * i);\n\n            tmp = arr[i-1];\n            arr[i-1] = arr[rnd];\n            arr[rnd] = tmp;\n        }\n\n        return;\n    },\n\n    // Returns a number in range [min, max].\n    randomInRange: function(min, max) {\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n};\n","'use strict';\n\n// For miscellaneous view modifications.\nmodule.exports = {\n\n    setMazeTopMargin: function(mazeMargin) {\n        var windowHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n        var mazeMenu     = document.getElementById('maze-menu');\n\n        document.getElementById('text-maze').style.marginTop = ((windowHeight - mazeMenu.scrollHeight) * mazeMargin / 2) + 'px';\n    }\n};\n"],"sourceRoot":"/source/"}